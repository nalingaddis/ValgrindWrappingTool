<Events startTimestamp="1650461184281" logVersion="1.0.0.202101171653">
  <Command __id="1" _type="SelectTextCommand" caretOffset="2336" date="Wed Apr 20 09:26:24 EDT 2022" end="2336" start="1833" starttimestamp="1650461184281" timestamp="297" />
  <Command __id="0" _type="DiffBasedFileOpenCommand" date="Wed Apr 20 09:26:24 EDT 2022" docASTNodeCount="1279" docActiveCodeLength="6829" docExpressionCount="887" docLength="7176" projectName="ValgrindWrappingTool" starttimestamp="1650461184281" timestamp="137">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/parser/Function.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package parser;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Function {
	String soName, fnName, returnType;
	String[] arguments;
	
	public class InvalidFunctionException extends Exception {
		private static final long serialVersionUID = 1L;

		public InvalidFunctionException(String message) {
			super(message);
		}
	}
	
	public Function(String encoded) throws InvalidFunctionException {
		String[] data = encoded.split(":");
		String[] name = data[0].split(",");
		String[] signature = data[1].split("->");
		
		if(signature[0].trim().equals("void")) {
			this.arguments = new String[0];
		} else {
			this.arguments = signature[0].split(",");
			for(int i=0; i<arguments.length; i++) {
				arguments[i] = arguments[i].trim();
			}
		}
		
		this.returnType = signature[1];
		returnType = returnType.trim();

		if(name.length == 1) {
			this.soName = "NONE";
			this.fnName = name[0];
		} else if(name.length == 2) {
			this.soName = name[0];
			this.fnName = name[1];
		} else {
			throw new InvalidFunctionException("Invalid Name");
		}
		
		soName = soName.trim();
		fnName = fnName.trim();
	}
	
	public String toCString() throws InvalidFunctionException {
		StringBuilder sb = new StringBuilder();
		
		sb.append(returnType);
		sb.append(" ");
		sb.append("I_WRAP_SONAME_FNNAME_ZZ(");
		sb.append(zEncodeName(soName));
		sb.append(", ");
		sb.append(zEncodeName(fnName));
		sb.append(")\n");
		
		sb.append("(");
		for(int i=0; i<arguments.length; i++) {
			sb.append(arguments[i]);
			if(i<arguments.length-1) {
				sb.append(", ");
			}
		}
		sb.append(")\n");
		
		sb.append("{");
		
		sb.append("\n\t");
		
		sb.append("OrigFn fn;");
		sb.append("\n\t");

		sb.append("VALGRIND_GET_ORIG_FN(fn);");
		sb.append("\n\t");

		
		if(!isVoid()) {
			sb.append(returnType);
			sb.append(" result;");
			sb.append("\n\t");

		}
		
		sb.append("CALL_FN_");
		
		if(isVoid()) {
			sb.append("v_");
		} else {
			sb.append("W_");
		}
		
		switch(arguments.length) {
		case 0: 
			sb.append("v"); break;
		case 1: case 2: case 3: case 4: 
			for(int i=0; i<arguments.length; i++) sb.append("W");
			break;
		case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12:
			sb.append(arguments.length);
			sb.append("W");
			break;
		default: 
			throw new InvalidFunctionException("Function contains more than 12 arguments");
		}
		
		sb.append("(");
		
		if(!isVoid()) {
			sb.append("result, ");
		}
		
		sb.append("fn");
		
		for(int i=0; i<arguments.length; i++) {
			if(i == 0) {
				sb.append(", ");
			}
			
			sb.append(parseArgName(arguments[i]));
			
			if(i < arguments.length-1) {
				sb.append(", ");
			}
		}
		
		sb.append(");");
		sb.append("\n\t");

		
		sb.append("trace(\""+fnName+": ");
		
		if(arguments.length == 0) sb.append("void");
		
		for(int i=0; i<arguments.length; i++) {			
			sb.append("%");
			sb.append(argStringFormatter(arguments[i]));
			
			if(i < arguments.length-1) {
				sb.append(", ");
			}
		}
		

		sb.append(" -> ");
		
		if(!isVoid()) {
			sb.append("%");
			sb.append(argStringFormatter(returnType));
		} else {
			sb.append("void");
		}
		
		sb.append("\"");		
		for(int i=0; i<arguments.length; i++) {
			if(i == 0) {
				sb.append(",");
			}
			
			if(argType(arguments[i]) == StringType.OTHER) {
				sb.append("&");
			}
			
			sb.append(parseArgName(arguments[i]));
			
			if(i < arguments.length-1) {
				sb.append(", ");
			}
		}
		
		if(!isVoid()) {
			sb.append(", ");
			
			if(argType(returnType) == StringType.OTHER) {
				sb.append("&");
			}
			
			sb.append("result");
		}
		sb.append(");");
		sb.append("\n");

		
		if(!isVoid()) {
			sb.append("\t");
			sb.append("return result;");
			sb.append("\n");
		}
		
		sb.append("}");
		
		return sb.toString();
	}
	
	private enum StringType {
		INT, UNSIGNED_INT, SIZE_T,
		LONG, UNSIGNED_LONG, LONG_LONG, UNSIGNED_LONG_LONG,
		SHORT,UNSIGNED_SHORT,
		FLOAT, DOUBLE, LONG_DOUBLE,
		CHAR, POINTER, ARRAY, OTHER
	}
	
	private StringType argType(String arg) {
		if(arg.contains("*")) return StringType.POINTER;
		if(arg.contains("[]")) return StringType.ARRAY;
		
		if(arg.contains("long double")) return StringType.LONG_DOUBLE;
		if(arg.contains("double")) return StringType.DOUBLE;
		if(arg.contains("float")) return StringType.FLOAT;
		
		if(arg.contains("unsigned long long")) return StringType.UNSIGNED_LONG_LONG;
		if(arg.contains("unsigned long")) return StringType.UNSIGNED_LONG;
		if(arg.contains("long long")) return StringType.LONG_LONG;
		if(arg.contains("long")) return StringType.LONG;
		
		if(arg.contains("unsigned short")) return StringType.UNSIGNED_SHORT;
		if(arg.contains("short")) return StringType.SHORT;
		
		if(arg.contains("unsigned int")) return StringType.UNSIGNED_INT;
		if(arg.contains("int")) return StringType.INT;
		
		if(arg.contains("char")) return StringType.CHAR;
		
		if(arg.contains("size_t")) return StringType.SIZE_T;
			
		return StringType.OTHER;
	}
	
	private String argStringFormatter(String arg) {
		switch(argType(arg)) {
		case POINTER: return "p";
		case ARRAY: return "p";
		
		case LONG_DOUBLE: return "Lg";
		case DOUBLE: case FLOAT: return "g";
		
		case UNSIGNED_LONG_LONG: return "llu";
		case UNSIGNED_LONG: return "lu";
		case LONG_LONG: return "lli";
		case LONG: return "li";
		
		case UNSIGNED_SHORT: return "hu";
		case SHORT: return "hi";
		
		case UNSIGNED_INT: return "u";
		case INT: return "i";
		
		case CHAR: return "c";
		
		case SIZE_T: return "zu";	
		
		case OTHER: default: return "p";
		}
	}
	
	private String parseArgName(String arg) throws InvalidFunctionException {
		// funarg
		if(arg.charAt(arg.length()-1) == ')') {
			Pattern pattern = Pattern.compile(".+\\(\\*(.+)\\)\\(.+\\)");
			Matcher m = pattern.matcher(arg);
			if(m.matches()) {
				return m.group(1);
			} else {
				throw new InvalidFunctionException("Invalid argument syntax: "+arg);
			}
		} else {
			String[] comps = arg.split(" |\\*");
			return comps[comps.length-1];
		}
	}
	
	private String zEncodeName(String name) throws InvalidFunctionException {
		/*
			 Za   encodes    *
			 Zp              +
			 Zc              :
			 Zd              .
			 Zu              _
			 Zh              -
			 Zs              (space)
			 ZA              @
			 ZZ              Z
			 ZL              (       # only in valgrind 3.3.0 and later
			 ZR              )       # only in valgrind 3.3.0 and later
		 */
		
		StringBuilder sb = new StringBuilder();
		for(char c: name.toCharArray()) {
			switch(c) {
			case('*'): sb.append("Za"); break;
			case('+'): sb.append("Zp"); break;
			case(':'): sb.append("Zc"); break;
			case('.'): sb.append("Zd"); break;
			case('_'): sb.append("Zu"); break;
			case('-'): sb.append("Zh"); break;
			case(' '): sb.append("Zs"); break;
			case('@'): sb.append("ZA"); break;
			case('Z'): sb.append("ZZ"); break;
			case('('): sb.append("ZL"); break;
			case(')'): sb.append("ZR"); break;
			default: 
				if(Character.isLetterOrDigit(c)) {
					sb.append(c);
				} else {
					throw new InvalidFunctionException("Invalid character in function name");
				}
			}
		}
		
		return sb.toString();
	}
	
	private boolean isVoid() {
		return returnType.equals("void");
	}
}
]]></snapshot>
  </Command>
  <Command __id="2" _type="MoveCaretCommand" caretOffset="1881" date="Wed Apr 20 09:37:12 EDT 2022" docOffset="1913" starttimestamp="1650461184281" timestamp="648371" />
  <Command __id="4" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 20 09:37:18 EDT 2022" docOffset="0" starttimestamp="1650461184281" timestamp="654222" />
  <Command __id="5" _type="ShellCommand" date="Wed Apr 20 09:37:33 EDT 2022" starttimestamp="1650461184281" timestamp="668780" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3" _type="DiffBasedFileOpenCommand" date="Wed Apr 20 09:37:18 EDT 2022" docASTNodeCount="145" docActiveCodeLength="814" docExpressionCount="90" docLength="814" projectName="ValgrindWrappingTool" starttimestamp="1650461184281" timestamp="653789">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/grader/SimpleGrader.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package grader;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

public class SimpleGrader extends AbstractGrader {

	public SimpleGrader(String studentDir, String filename) throws Exception {
		super(studentDir, filename);
	}

	public List<Test> grade() {
		List<Test> tests = new ArrayList<Test>();
		
		tests.add(countFuncCall("pthread_create", 2));
		tests.add(countFuncCall("pthread_join", 2));
		tests.add(countFuncCall("pthread_mutex_lock", 20));
		tests.add(countFuncCall("pthread_mutex_unlock", 20));
				
		return tests;
	}
	
	private Test countFuncCall(String fnname, int requiredCount) {
		int count = 0; 
		
		for(Trace trace: traces) {
			if(trace.fnname.equals(fnname)) {
				count ++;
			}
		}
		
		return new Test("Called " + fnname, count >= requiredCount);
	}
}
]]></snapshot>
  </Command>
  <Command __id="6" _type="ShellCommand" date="Wed Apr 20 09:37:41 EDT 2022" starttimestamp="1650461184281" timestamp="677351" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7" _type="EclipseCommand" commandID="" date="Wed Apr 20 09:37:41 EDT 2022" starttimestamp="1650461184281" timestamp="677381" />
  <Command __id="8" _type="EclipseCommand" commandID="" date="Wed Apr 20 09:37:42 EDT 2022" starttimestamp="1650461184281" timestamp="677937" />
  <Command __id="10" _type="MoveCaretCommand" caretOffset="980" date="Wed Apr 20 09:37:47 EDT 2022" docOffset="1263" starttimestamp="1650461184281" timestamp="683261" />
  <Command __id="11" _type="ShellCommand" date="Wed Apr 20 09:38:25 EDT 2022" starttimestamp="1650461184281" timestamp="721189" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="12" _type="ShellCommand" date="Wed Apr 20 09:38:49 EDT 2022" starttimestamp="1650461184281" timestamp="744967" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="13" _type="EclipseCommand" commandID="" date="Wed Apr 20 09:38:49 EDT 2022" starttimestamp="1650461184281" timestamp="745060" />
  <Command __id="14" _type="EclipseCommand" commandID="" date="Wed Apr 20 09:38:49 EDT 2022" starttimestamp="1650461184281" timestamp="745088" />
  <Command __id="9" _type="DiffBasedFileOpenCommand" date="Wed Apr 20 09:37:47 EDT 2022" docASTNodeCount="385" docActiveCodeLength="2279" docExpressionCount="233" docLength="2319" projectName="ValgrindWrappingTool" starttimestamp="1650461184281" timestamp="682880">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/main/Main.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package main;

import java.util.ArrayList;
import java.util.List;

import javax.swing.SwingUtilities;

import compiler.CompilerHelper;
import compiler.DockerHelper;
import grader.Grader;
import grader.MutexLruGrader;
import grader.SimpleGrader;
import grader.Test;
import gui.App;
import parser.Parser;
import parser.Wrapper;

public class Main {
	public static final String WRAPPER_FILE_SUFFIX = "-wrapper";
	public static final String CONFIG_FILE = "MutexLruConfig";
	public static final String TRACE_FILE = "Traces";
	
	public static void main(String[] args) {
		SwingUtilities.invokeLater(new App());
	}
	
	public static List<Test> testMakefileDirectory(String directory) {
		try {
			DockerHelper.deleteContainer();
			DockerHelper.createContainer(directory);
			
			Parser parser = new Parser(CONFIG_FILE);
			
			Wrapper wrapper = parser.parse();
			wrapper.toFile(CONFIG_FILE, directory);
			
			CompilerHelper ch = new CompilerHelper(CONFIG_FILE, directory, TRACE_FILE);
			
			ch.compileWrapper();
			ch.deleteWrapperCFile();
			// call make here
			ch.make();
			ch.deleteWrapperObjFile();
			ch.trace(new String[]{"./lru-mutex-wrapped", "-c", "2"});
			ch.makeClean();
			
			Grader grader = new MutexLruGrader(directory, TRACE_FILE);
//			ch.deleteTraces();
			return grader.grade();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		List<Test> error = new ArrayList<Test>();
		error.add(new Test("Error: Check console", false));
		return error;
	}
	
	public static List<Test> testDirectory(String directory) {
		try {
			DockerHelper.deleteContainer();
			DockerHelper.createContainer(directory);
			
			Parser parser = new Parser(CONFIG_FILE);
			
			Wrapper wrapper = parser.parse();
			wrapper.toFile(CONFIG_FILE, directory);
			
			CompilerHelper ch = new CompilerHelper(CONFIG_FILE, directory, TRACE_FILE);
			
			ch.compileWrapper();
			ch.deleteWrapperCFile();
			ch.compileStudentCode();
			ch.deleteWrapperObjFile();
			ch.trace();
			ch.deleteBinary();
			
			DockerHelper.stopContainer();
			
			Grader grader = new SimpleGrader(directory, TRACE_FILE);
			ch.deleteTraces();
			return grader.grade();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		List<Test> error = new ArrayList<Test>();
		error.add(new Test("Error: Check console", false));
		return error;
	}
}
]]></snapshot>
  </Command>
  <Command __id="23" _type="ShellCommand" date="Wed Apr 20 09:38:59 EDT 2022" starttimestamp="1650461184281" timestamp="755076" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="24" _type="EclipseCommand" commandID="" date="Wed Apr 20 09:38:59 EDT 2022" starttimestamp="1650461184281" timestamp="755145" />
  <Command __id="25" _type="EclipseCommand" commandID="" date="Wed Apr 20 09:38:59 EDT 2022" starttimestamp="1650461184281" timestamp="755189" />
  <Command __id="27" _type="ShellCommand" date="Wed Apr 20 09:39:06 EDT 2022" starttimestamp="1650461184281" timestamp="761726" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="28" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Wed Apr 20 09:39:06 EDT 2022" starttimestamp="1650461184281" timestamp="761734" />
  <Command __id="29" _type="EclipseCommand" commandID="" date="Wed Apr 20 09:39:06 EDT 2022" starttimestamp="1650461184281" timestamp="761773" />
  <Command __id="30" _type="EclipseCommand" commandID="" date="Wed Apr 20 09:39:06 EDT 2022" starttimestamp="1650461184281" timestamp="761777" />
  <Command __id="31" _type="ShellCommand" date="Wed Apr 20 09:39:14 EDT 2022" starttimestamp="1650461184281" timestamp="770058" type="ECLIPSE_LOST_FOCUS" />
  <DocumentChange __id="16" _type="Insert" date="Wed Apr 20 09:38:58 EDT 2022" docASTNodeCount="397" docActiveCodeLength="2361" docExpressionCount="243" docLength="2401" length="82" offset="325" repeat="4" starttimestamp="1650461184281" timestamp="754038" timestamp2="754044">
    <text><![CDATA[
import valgrindpp.helpers.CompilerHelper;
import valgrindpp.helpers.DockerHelper;]]></text>
  </DocumentChange>
  <DocumentChange __id="20" _type="Delete" date="Wed Apr 20 09:38:58 EDT 2022" docASTNodeCount="397" docActiveCodeLength="2360" docExpressionCount="243" docLength="2400" endLine="9" length="1" offset="164" startLine="8" starttimestamp="1650461184281" timestamp="754047">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <DocumentChange __id="21" _type="Insert" date="Wed Apr 20 09:38:58 EDT 2022" docASTNodeCount="397" docActiveCodeLength="2362" docExpressionCount="243" docLength="2402" length="2" offset="164" starttimestamp="1650461184281" timestamp="754048">
    <text><![CDATA[

]]></text>
  </DocumentChange>
  <DocumentChange __id="22" _type="Delete" date="Wed Apr 20 09:38:58 EDT 2022" docASTNodeCount="389" docActiveCodeLength="2299" docExpressionCount="237" docLength="2339" endLine="8" length="63" offset="101" startLine="5" starttimestamp="1650461184281" timestamp="754050">
    <text><![CDATA[

import compiler.CompilerHelper;
import compiler.DockerHelper;]]></text>
  </DocumentChange>
  <Command __id="32" _type="ShellCommand" date="Wed Apr 20 09:39:30 EDT 2022" starttimestamp="1650461184281" timestamp="786572" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="33" _type="EclipseCommand" commandID="" date="Wed Apr 20 09:39:30 EDT 2022" starttimestamp="1650461184281" timestamp="786633" />
  <Command __id="34" _type="EclipseCommand" commandID="" date="Wed Apr 20 09:39:30 EDT 2022" starttimestamp="1650461184281" timestamp="786660" />
  <Command __id="38" _type="MoveCaretCommand" caretOffset="587" date="Wed Apr 20 09:39:36 EDT 2022" docOffset="736" starttimestamp="1650461184281" timestamp="791826" />
  <Command __id="39" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 20 09:39:36 EDT 2022" docOffset="0" starttimestamp="1650461184281" timestamp="791866" />
  <Command __id="40" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 20 09:39:36 EDT 2022" docOffset="0" starttimestamp="1650461184281" timestamp="791875" />
  <Command __id="35" _type="DiffBasedFileOpenCommand" date="Wed Apr 20 09:39:35 EDT 2022" docASTNodeCount="165" docActiveCodeLength="808" docExpressionCount="99" docLength="952" projectName="ValgrindWrappingTool" starttimestamp="1650461184281" timestamp="790938">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/grader/AbstractGrader.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package grader;

import java.io.File;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import grader.Trace.TraceParsingException;

public abstract class AbstractGrader implements Grader {
	List<Trace> traces;
	List<String> stdout;
	
	public AbstractGrader(String studentDir, String filename) throws Exception {
		traces = new ArrayList<Trace>();
		stdout = new ArrayList<String>();
		
		File file = new File(Paths.get(studentDir, filename).toString());
		Scanner scanner = new Scanner(file);
		
		while(scanner.hasNextLine()) {
			String line = scanner.nextLine();
			try {
				traces.add(new Trace(line));
			} catch (TraceParsingException e) {
				stdout.add(line);
			}
		}
		
//		traces.sort(new Comparator<Trace>() {
//			public int compare(Trace a, Trace b) {
//				return (int) (a.timestamp - b.timestamp);
//			}
//		});
		
		scanner.close();
	}
	
	public abstract List<Test> grade();
}
]]></snapshot>
  </Command>
  <Command __id="36" _type="DiffBasedFileOpenCommand" date="Wed Apr 20 09:39:35 EDT 2022" docASTNodeCount="290" docActiveCodeLength="1328" docExpressionCount="177" docLength="1328" projectName="ValgrindWrappingTool" starttimestamp="1650461184281" timestamp="791053">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/grader/BoundedBufferGrader.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package grader;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class BoundedBufferGrader extends AbstractGrader {

	public BoundedBufferGrader(String studentDir, String filename) throws Exception {
		super(studentDir, filename);
	}

	public List<Test> grade() {
		Map<Long, Set<String>> waits = new HashMap<Long, Set<String>>();
		Map<Long, Set<String>> posts = new HashMap<Long, Set<String>>();
		
		List<Test> tests = new ArrayList<Test>();
		
		for(Trace trace: traces) {
			Map<Long, Set<String>> map;
			
			if(trace.fnname.equals("sem_wait")) {
				map = waits;
			} else if(trace.fnname.equals("sem_post")) {
				map = posts;
			} else {
				continue;
			}
			
			Set<String> sems = map.get(trace.thread);
			if(sems == null) {
				sems = new HashSet<String>();
			}
			sems.add(trace.arguments[0]);
			map.put(trace.thread, sems);
		}
		
		for(Long thread: waits.keySet()) {
			String testName = thread + " waits on correct number of sems.";
			tests.add(new Test(testName, waits.get(thread).size() < 2));
		}
		
		for(Long thread: waits.keySet()) {
			String testName = thread + " posts on correct number of sems.";
			tests.add(new Test(testName, posts.get(thread).size() < 2));
		}
		
		return tests;
	}
	
}
]]></snapshot>
  </Command>
  <Command __id="37" _type="DiffBasedFileOpenCommand" date="Wed Apr 20 09:39:35 EDT 2022" docASTNodeCount="20" docActiveCodeLength="97" docExpressionCount="10" docLength="97" projectName="ValgrindWrappingTool" starttimestamp="1650461184281" timestamp="791179">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/grader/Grader.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package grader;

import java.util.List;

public interface Grader {
	public List<Test> grade();
}
]]></snapshot>
  </Command>
  <Command __id="42" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Apr 20 09:39:48 EDT 2022" start_end="END" starttimestamp="1650461184281" timestamp="804713" />
  <Command __id="43" _type="AssistCommand" assist_type="QUICK_ASSIST" auto_activated="false" date="Wed Apr 20 09:39:48 EDT 2022" start_end="END" starttimestamp="1650461184281" timestamp="804714" />
  <Command __id="44" _type="ShellCommand" date="Wed Apr 20 09:39:49 EDT 2022" starttimestamp="1650461184281" timestamp="804975" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="45" _type="EclipseCommand" commandID="" date="Wed Apr 20 09:39:49 EDT 2022" starttimestamp="1650461184281" timestamp="805055" />
  <Command __id="46" _type="EclipseCommand" commandID="" date="Wed Apr 20 09:39:49 EDT 2022" starttimestamp="1650461184281" timestamp="805136" />
  <Command __id="48" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 20 09:39:51 EDT 2022" docOffset="0" starttimestamp="1650461184281" timestamp="806953" />
  <Command __id="49" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.organize.imports" date="Wed Apr 20 09:39:53 EDT 2022" starttimestamp="1650461184281" timestamp="809431" />
  <Command __id="50" _type="MoveCaretCommand" caretOffset="499" date="Wed Apr 20 09:39:55 EDT 2022" docOffset="723" starttimestamp="1650461184281" timestamp="810850" />
  <Command __id="51" _type="MoveCaretCommand" caretOffset="499" date="Wed Apr 20 09:39:55 EDT 2022" docOffset="723" starttimestamp="1650461184281" timestamp="810850" />
  <Command __id="47" _type="DiffBasedFileOpenCommand" date="Wed Apr 20 09:39:51 EDT 2022" docASTNodeCount="308" docActiveCodeLength="1433" docExpressionCount="192" docLength="1433" projectName="ValgrindWrappingTool" starttimestamp="1650461184281" timestamp="806778">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/grader/BoundedBufferGrader.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package grader;¶¶import java.util.ArrayList;¶import java.util.HashMap;¶import java.util.HashSet;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶¶"), Diff(INSERT,"import valgrindpp.grader.AbstractGrader;¶import valgrindpp.grader.Test;¶import valgrindpp.grader.Trace;¶¶"), Diff(EQUAL,"public class BoundedBufferGrader extends AbstractGrader {¶¶	public BoundedBufferGrader(String studentDir, String filename) throws Exception {¶		super(studentDir, filename);¶	}¶¶	public List<Test> grade() {¶		Map<Long, Set<String>> waits = new HashMap<Long, Set<String>>();¶		Map<Long, Set<String>> posts = new HashMap<Long, Set<String>>();¶		¶		List<Test> tests = new ArrayList<Test>();¶		¶		for(Trace trace: traces) {¶			Map<Long, Set<String>> map;¶			¶			if(trace.fnname.equals("sem_wait")) {¶				map = waits;¶			} else if(trace.fnname.equals("sem_post")) {¶				map = posts;¶			} else {¶				continue;¶			}¶			¶			Set<String> sems = map.get(trace.thread);¶			if(sems == null) {¶				sems = new HashSet<String>();¶			}¶			sems.add(trace.arguments[0]);¶			map.put(trace.thread, sems);¶		}¶		¶		for(Long thread: waits.keySet()) {¶			String testName = thread + " waits on correct number of sems.";¶			tests.add(new Test(testName, waits.get(thread).size() < 2));¶		}¶		¶		for(Long thread: waits.keySet()) {¶			String testName = thread + " posts on correct number of sems.";¶			tests.add(new Test(testName, posts.get(thread).size() < 2));¶		}¶		¶		return tests;¶	}¶	¶}¶")]]]></diff>
    <snapshot><![CDATA[package grader;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import valgrindpp.grader.AbstractGrader;
import valgrindpp.grader.Test;
import valgrindpp.grader.Trace;

public class BoundedBufferGrader extends AbstractGrader {

	public BoundedBufferGrader(String studentDir, String filename) throws Exception {
		super(studentDir, filename);
	}

	public List<Test> grade() {
		Map<Long, Set<String>> waits = new HashMap<Long, Set<String>>();
		Map<Long, Set<String>> posts = new HashMap<Long, Set<String>>();
		
		List<Test> tests = new ArrayList<Test>();
		
		for(Trace trace: traces) {
			Map<Long, Set<String>> map;
			
			if(trace.fnname.equals("sem_wait")) {
				map = waits;
			} else if(trace.fnname.equals("sem_post")) {
				map = posts;
			} else {
				continue;
			}
			
			Set<String> sems = map.get(trace.thread);
			if(sems == null) {
				sems = new HashSet<String>();
			}
			sems.add(trace.arguments[0]);
			map.put(trace.thread, sems);
		}
		
		for(Long thread: waits.keySet()) {
			String testName = thread + " waits on correct number of sems.";
			tests.add(new Test(testName, waits.get(thread).size() < 2));
		}
		
		for(Long thread: waits.keySet()) {
			String testName = thread + " posts on correct number of sems.";
			tests.add(new Test(testName, posts.get(thread).size() < 2));
		}
		
		return tests;
	}
	
}
]]></snapshot>
  </Command>
  <Command __id="52" _type="MoveCaretCommand" caretOffset="90" date="Wed Apr 20 09:39:56 EDT 2022" docOffset="314" starttimestamp="1650461184281" timestamp="812108" />
  <Command __id="53" _type="MoveCaretCommand" caretOffset="90" date="Wed Apr 20 09:39:56 EDT 2022" docOffset="314" starttimestamp="1650461184281" timestamp="812108" />
  <Command __id="55" _type="MoveCaretCommand" caretOffset="598" date="Wed Apr 20 09:40:07 EDT 2022" docOffset="758" starttimestamp="1650461184281" timestamp="823208" />
  <Command __id="54" _type="DiffBasedFileOpenCommand" date="Wed Apr 20 09:40:07 EDT 2022" docASTNodeCount="169" docActiveCodeLength="830" docExpressionCount="103" docLength="974" projectName="ValgrindWrappingTool" starttimestamp="1650461184281" timestamp="823013">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/valgrindpp/grader/AbstractGrader.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package valgrindpp.grader;

import java.io.File;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import valgrindpp.grader.Trace.TraceParsingException;

public abstract class AbstractGrader implements Grader {
	List<Trace> traces;
	List<String> stdout;
	
	public AbstractGrader(String studentDir, String filename) throws Exception {
		traces = new ArrayList<Trace>();
		stdout = new ArrayList<String>();
		
		File file = new File(Paths.get(studentDir, filename).toString());
		Scanner scanner = new Scanner(file);
		
		while(scanner.hasNextLine()) {
			String line = scanner.nextLine();
			try {
				traces.add(new Trace(line));
			} catch (TraceParsingException e) {
				stdout.add(line);
			}
		}
		
//		traces.sort(new Comparator<Trace>() {
//			public int compare(Trace a, Trace b) {
//				return (int) (a.timestamp - b.timestamp);
//			}
//		});
		
		scanner.close();
	}
	
	public abstract List<Test> grade();
}
]]></snapshot>
  </Command>
  <Command __id="56" _type="MoveCaretCommand" caretOffset="232" date="Wed Apr 20 09:40:11 EDT 2022" docOffset="392" starttimestamp="1650461184281" timestamp="826963" />
  <Command __id="57" _type="MoveCaretCommand" caretOffset="232" date="Wed Apr 20 09:40:11 EDT 2022" docOffset="392" starttimestamp="1650461184281" timestamp="826963" />
  <Command __id="59" _type="InsertStringCommand" date="Wed Apr 20 09:40:12 EDT 2022" starttimestamp="1650461184281" timestamp="828182" timestamp2="828182">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="60" _type="InsertStringCommand" date="Wed Apr 20 09:40:12 EDT 2022" starttimestamp="1650461184281" timestamp="828182" timestamp2="828182">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="62" _type="InsertStringCommand" date="Wed Apr 20 09:40:12 EDT 2022" starttimestamp="1650461184281" timestamp="828353" timestamp2="828353">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="63" _type="InsertStringCommand" date="Wed Apr 20 09:40:12 EDT 2022" starttimestamp="1650461184281" timestamp="828353" timestamp2="828353">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="65" _type="InsertStringCommand" date="Wed Apr 20 09:40:12 EDT 2022" starttimestamp="1650461184281" timestamp="828426" timestamp2="828426">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="66" _type="InsertStringCommand" date="Wed Apr 20 09:40:12 EDT 2022" starttimestamp="1650461184281" timestamp="828426" timestamp2="828426">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="68" _type="InsertStringCommand" date="Wed Apr 20 09:40:12 EDT 2022" starttimestamp="1650461184281" timestamp="828567" timestamp2="828567">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="69" _type="InsertStringCommand" date="Wed Apr 20 09:40:12 EDT 2022" starttimestamp="1650461184281" timestamp="828567" timestamp2="828567">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="71" _type="InsertStringCommand" date="Wed Apr 20 09:40:13 EDT 2022" starttimestamp="1650461184281" timestamp="828743" timestamp2="828743">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="72" _type="InsertStringCommand" date="Wed Apr 20 09:40:13 EDT 2022" starttimestamp="1650461184281" timestamp="828743" timestamp2="828743">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="74" _type="InsertStringCommand" date="Wed Apr 20 09:40:13 EDT 2022" starttimestamp="1650461184281" timestamp="829384" timestamp2="829384">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="75" _type="InsertStringCommand" date="Wed Apr 20 09:40:13 EDT 2022" starttimestamp="1650461184281" timestamp="829384" timestamp2="829384">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="77" _type="InsertStringCommand" date="Wed Apr 20 09:40:13 EDT 2022" starttimestamp="1650461184281" timestamp="829678" timestamp2="829678">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="78" _type="InsertStringCommand" date="Wed Apr 20 09:40:13 EDT 2022" starttimestamp="1650461184281" timestamp="829678" timestamp2="829678">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="80" _type="InsertStringCommand" date="Wed Apr 20 09:40:14 EDT 2022" starttimestamp="1650461184281" timestamp="829834" timestamp2="829834">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="81" _type="InsertStringCommand" date="Wed Apr 20 09:40:14 EDT 2022" starttimestamp="1650461184281" timestamp="829834" timestamp2="829834">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="83" _type="InsertStringCommand" date="Wed Apr 20 09:40:14 EDT 2022" starttimestamp="1650461184281" timestamp="829909" timestamp2="829909">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="84" _type="InsertStringCommand" date="Wed Apr 20 09:40:14 EDT 2022" starttimestamp="1650461184281" timestamp="829910" timestamp2="829910">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="86" _type="InsertStringCommand" date="Wed Apr 20 09:40:14 EDT 2022" starttimestamp="1650461184281" timestamp="830071" timestamp2="830071">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="87" _type="InsertStringCommand" date="Wed Apr 20 09:40:14 EDT 2022" starttimestamp="1650461184281" timestamp="830071" timestamp2="830071">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="88" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 20 09:40:15 EDT 2022" starttimestamp="1650461184281" timestamp="830997" />
  <Command __id="89" _type="EclipseCommand" commandID="" date="Wed Apr 20 09:40:15 EDT 2022" starttimestamp="1650461184281" timestamp="831091" />
  <Command __id="90" _type="EclipseCommand" commandID="" date="Wed Apr 20 09:40:15 EDT 2022" starttimestamp="1650461184281" timestamp="831115" />
  <Command __id="91" _type="MoveCaretCommand" caretOffset="237" date="Wed Apr 20 09:40:17 EDT 2022" docOffset="397" starttimestamp="1650461184281" timestamp="832988" />
  <Command __id="92" _type="MoveCaretCommand" caretOffset="237" date="Wed Apr 20 09:40:17 EDT 2022" docOffset="397" starttimestamp="1650461184281" timestamp="832990" />
  <Command __id="93" _type="SelectTextCommand" caretOffset="241" date="Wed Apr 20 09:40:17 EDT 2022" end="241" start="232" starttimestamp="1650461184281" timestamp="833146" />
  <Command __id="94" _type="SelectTextCommand" caretOffset="241" date="Wed Apr 20 09:40:17 EDT 2022" end="241" start="232" starttimestamp="1650461184281" timestamp="833146" />
  <Command __id="96" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Wed Apr 20 09:40:18 EDT 2022" starttimestamp="1650461184281" timestamp="833720" />
  <Command __id="98" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Wed Apr 20 09:40:18 EDT 2022" starttimestamp="1650461184281" timestamp="833846" />
  <DocumentChange __id="58" _type="Insert" date="Wed Apr 20 09:40:12 EDT 2022" docASTNodeCount="172" docActiveCodeLength="840" docExpressionCount="103" docLength="984" length="10" offset="392" repeat="10" starttimestamp="1650461184281" timestamp="828176" timestamp2="830068">
    <text><![CDATA[protected ]]></text>
  </DocumentChange>
  <DocumentChange __id="95" _type="Delete" date="Wed Apr 20 09:40:17 EDT 2022" docASTNodeCount="169" docActiveCodeLength="830" docExpressionCount="103" docLength="974" endLine="15" length="10" offset="392" repeat="2" startLine="15" starttimestamp="1650461184281" timestamp="833713" timestamp2="833843">
    <text><![CDATA[protected ]]></text>
  </DocumentChange>
  <Command __id="99" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 20 09:40:19 EDT 2022" starttimestamp="1650461184281" timestamp="834963" />
  <Command __id="100" _type="EclipseCommand" commandID="" date="Wed Apr 20 09:40:19 EDT 2022" starttimestamp="1650461184281" timestamp="835059" />
  <Command __id="101" _type="EclipseCommand" commandID="" date="Wed Apr 20 09:40:19 EDT 2022" starttimestamp="1650461184281" timestamp="835073" />
  <DocumentChange __id="102" _type="Insert" date="Wed Apr 20 09:40:21 EDT 2022" docASTNodeCount="169" docActiveCodeLength="832" docExpressionCount="103" docLength="976" length="2" offset="392" repeat="2" starttimestamp="1650461184281" timestamp="836907" timestamp2="837069">
    <text><![CDATA[pr]]></text>
  </DocumentChange>
  <Command __id="103" _type="InsertStringCommand" date="Wed Apr 20 09:40:21 EDT 2022" starttimestamp="1650461184281" timestamp="836910" timestamp2="836910">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="104" _type="InsertStringCommand" date="Wed Apr 20 09:40:21 EDT 2022" starttimestamp="1650461184281" timestamp="836910" timestamp2="836910">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="106" _type="InsertStringCommand" date="Wed Apr 20 09:40:21 EDT 2022" starttimestamp="1650461184281" timestamp="837073" timestamp2="837073">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="107" _type="InsertStringCommand" date="Wed Apr 20 09:40:21 EDT 2022" starttimestamp="1650461184281" timestamp="837073" timestamp2="837073">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="109" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 20 09:40:21 EDT 2022" starttimestamp="1650461184281" timestamp="837686" />
  <Command __id="110" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 20 09:40:21 EDT 2022" starttimestamp="1650461184281" timestamp="837686" />
  <Command __id="112" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 20 09:40:22 EDT 2022" starttimestamp="1650461184281" timestamp="837814" />
  <Command __id="113" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 20 09:40:22 EDT 2022" starttimestamp="1650461184281" timestamp="837814" />
  <Command __id="114" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 20 09:40:22 EDT 2022" starttimestamp="1650461184281" timestamp="838273" />
  <Command __id="115" _type="EclipseCommand" commandID="" date="Wed Apr 20 09:40:22 EDT 2022" starttimestamp="1650461184281" timestamp="838365" />
  <Command __id="116" _type="EclipseCommand" commandID="" date="Wed Apr 20 09:40:22 EDT 2022" starttimestamp="1650461184281" timestamp="838375" />
  <Command __id="117" _type="ShellCommand" date="Wed Apr 20 09:40:23 EDT 2022" starttimestamp="1650461184281" timestamp="839653" type="ECLIPSE_LOST_FOCUS" />
  <DocumentChange __id="108" _type="Delete" date="Wed Apr 20 09:40:21 EDT 2022" docASTNodeCount="169" docActiveCodeLength="830" docExpressionCount="103" docLength="974" endLine="15" length="2" offset="392" repeat="2" startLine="15" starttimestamp="1650461184281" timestamp="837681" timestamp2="837812">
    <text><![CDATA[pr]]></text>
  </DocumentChange>
  <DocumentChange __id="119" _type="Insert" date="Wed Apr 20 09:40:48 EDT 2022" docASTNodeCount="172" docActiveCodeLength="840" docExpressionCount="103" docLength="984" length="10" offset="392" repeat="10" starttimestamp="1650461184281" timestamp="864278" timestamp2="865666">
    <text><![CDATA[protected ]]></text>
  </DocumentChange>
  <Command __id="118" _type="ShellCommand" date="Wed Apr 20 09:40:47 EDT 2022" starttimestamp="1650461184281" timestamp="863380" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="120" _type="InsertStringCommand" date="Wed Apr 20 09:40:48 EDT 2022" starttimestamp="1650461184281" timestamp="864281" timestamp2="864281">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="121" _type="InsertStringCommand" date="Wed Apr 20 09:40:48 EDT 2022" starttimestamp="1650461184281" timestamp="864281" timestamp2="864281">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="123" _type="InsertStringCommand" date="Wed Apr 20 09:40:48 EDT 2022" starttimestamp="1650461184281" timestamp="864477" timestamp2="864477">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="124" _type="InsertStringCommand" date="Wed Apr 20 09:40:48 EDT 2022" starttimestamp="1650461184281" timestamp="864477" timestamp2="864477">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="126" _type="InsertStringCommand" date="Wed Apr 20 09:40:48 EDT 2022" starttimestamp="1650461184281" timestamp="864576" timestamp2="864576">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="127" _type="InsertStringCommand" date="Wed Apr 20 09:40:48 EDT 2022" starttimestamp="1650461184281" timestamp="864577" timestamp2="864577">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="129" _type="InsertStringCommand" date="Wed Apr 20 09:40:48 EDT 2022" starttimestamp="1650461184281" timestamp="864685" timestamp2="864685">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="130" _type="InsertStringCommand" date="Wed Apr 20 09:40:48 EDT 2022" starttimestamp="1650461184281" timestamp="864685" timestamp2="864685">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="132" _type="InsertStringCommand" date="Wed Apr 20 09:40:49 EDT 2022" starttimestamp="1650461184281" timestamp="864849" timestamp2="864849">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="133" _type="InsertStringCommand" date="Wed Apr 20 09:40:49 EDT 2022" starttimestamp="1650461184281" timestamp="864849" timestamp2="864849">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="135" _type="InsertStringCommand" date="Wed Apr 20 09:40:49 EDT 2022" starttimestamp="1650461184281" timestamp="865013" timestamp2="865013">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="136" _type="InsertStringCommand" date="Wed Apr 20 09:40:49 EDT 2022" starttimestamp="1650461184281" timestamp="865013" timestamp2="865013">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="138" _type="InsertStringCommand" date="Wed Apr 20 09:40:49 EDT 2022" starttimestamp="1650461184281" timestamp="865333" timestamp2="865333">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="139" _type="InsertStringCommand" date="Wed Apr 20 09:40:49 EDT 2022" starttimestamp="1650461184281" timestamp="865334" timestamp2="865334">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="141" _type="InsertStringCommand" date="Wed Apr 20 09:40:49 EDT 2022" starttimestamp="1650461184281" timestamp="865483" timestamp2="865483">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="142" _type="InsertStringCommand" date="Wed Apr 20 09:40:49 EDT 2022" starttimestamp="1650461184281" timestamp="865484" timestamp2="865484">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="144" _type="InsertStringCommand" date="Wed Apr 20 09:40:49 EDT 2022" starttimestamp="1650461184281" timestamp="865555" timestamp2="865555">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="145" _type="InsertStringCommand" date="Wed Apr 20 09:40:49 EDT 2022" starttimestamp="1650461184281" timestamp="865556" timestamp2="865556">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="147" _type="InsertStringCommand" date="Wed Apr 20 09:40:49 EDT 2022" starttimestamp="1650461184281" timestamp="865669" timestamp2="865669">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="148" _type="InsertStringCommand" date="Wed Apr 20 09:40:49 EDT 2022" starttimestamp="1650461184281" timestamp="865669" timestamp2="865669">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="150" _type="UndoCommand" date="Wed Apr 20 09:40:51 EDT 2022" starttimestamp="1650461184281" timestamp="867297" />
  <Command __id="151" _type="MoveCaretCommand" caretOffset="108" date="Wed Apr 20 09:40:53 EDT 2022" docOffset="268" starttimestamp="1650461184281" timestamp="868758" />
  <Command __id="152" _type="MoveCaretCommand" caretOffset="108" date="Wed Apr 20 09:40:53 EDT 2022" docOffset="268" starttimestamp="1650461184281" timestamp="868759" />
  <Command __id="154" _type="InsertStringCommand" date="Wed Apr 20 09:40:53 EDT 2022" starttimestamp="1650461184281" timestamp="869036" timestamp2="869036">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="155" _type="InsertStringCommand" date="Wed Apr 20 09:40:53 EDT 2022" starttimestamp="1650461184281" timestamp="869037" timestamp2="869037">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="157" _type="InsertStringCommand" date="Wed Apr 20 09:40:53 EDT 2022" starttimestamp="1650461184281" timestamp="869227" timestamp2="869227">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="158" _type="InsertStringCommand" date="Wed Apr 20 09:40:53 EDT 2022" starttimestamp="1650461184281" timestamp="869227" timestamp2="869227">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="160" _type="InsertStringCommand" date="Wed Apr 20 09:40:53 EDT 2022" starttimestamp="1650461184281" timestamp="869327" timestamp2="869327">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="161" _type="InsertStringCommand" date="Wed Apr 20 09:40:53 EDT 2022" starttimestamp="1650461184281" timestamp="869327" timestamp2="869327">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="163" _type="InsertStringCommand" date="Wed Apr 20 09:40:53 EDT 2022" starttimestamp="1650461184281" timestamp="869479" timestamp2="869479">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="164" _type="InsertStringCommand" date="Wed Apr 20 09:40:53 EDT 2022" starttimestamp="1650461184281" timestamp="869479" timestamp2="869479">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="166" _type="InsertStringCommand" date="Wed Apr 20 09:40:53 EDT 2022" starttimestamp="1650461184281" timestamp="869633" timestamp2="869633">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="167" _type="InsertStringCommand" date="Wed Apr 20 09:40:53 EDT 2022" starttimestamp="1650461184281" timestamp="869633" timestamp2="869633">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="169" _type="InsertStringCommand" date="Wed Apr 20 09:40:54 EDT 2022" starttimestamp="1650461184281" timestamp="869766" timestamp2="869766">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="170" _type="InsertStringCommand" date="Wed Apr 20 09:40:54 EDT 2022" starttimestamp="1650461184281" timestamp="869766" timestamp2="869766">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="172" _type="InsertStringCommand" date="Wed Apr 20 09:40:54 EDT 2022" starttimestamp="1650461184281" timestamp="870043" timestamp2="870043">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="173" _type="InsertStringCommand" date="Wed Apr 20 09:40:54 EDT 2022" starttimestamp="1650461184281" timestamp="870044" timestamp2="870044">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="175" _type="InsertStringCommand" date="Wed Apr 20 09:40:54 EDT 2022" starttimestamp="1650461184281" timestamp="870176" timestamp2="870176">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="176" _type="InsertStringCommand" date="Wed Apr 20 09:40:54 EDT 2022" starttimestamp="1650461184281" timestamp="870176" timestamp2="870176">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="178" _type="InsertStringCommand" date="Wed Apr 20 09:40:54 EDT 2022" starttimestamp="1650461184281" timestamp="870348" timestamp2="870348">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="179" _type="InsertStringCommand" date="Wed Apr 20 09:40:54 EDT 2022" starttimestamp="1650461184281" timestamp="870348" timestamp2="870348">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="181" _type="InsertStringCommand" date="Wed Apr 20 09:40:54 EDT 2022" starttimestamp="1650461184281" timestamp="870355" timestamp2="870355">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="182" _type="InsertStringCommand" date="Wed Apr 20 09:40:54 EDT 2022" starttimestamp="1650461184281" timestamp="870355" timestamp2="870355">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="184" _type="InsertStringCommand" date="Wed Apr 20 09:40:54 EDT 2022" starttimestamp="1650461184281" timestamp="870423" timestamp2="870423">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="185" _type="InsertStringCommand" date="Wed Apr 20 09:40:54 EDT 2022" starttimestamp="1650461184281" timestamp="870423" timestamp2="870423">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="187" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 20 09:40:55 EDT 2022" starttimestamp="1650461184281" timestamp="871128" />
  <Command __id="188" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 20 09:40:55 EDT 2022" starttimestamp="1650461184281" timestamp="871129" />
  <Command __id="190" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 20 09:40:55 EDT 2022" starttimestamp="1650461184281" timestamp="871255" />
  <Command __id="191" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 20 09:40:55 EDT 2022" starttimestamp="1650461184281" timestamp="871256" />
  <Command __id="193" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 20 09:40:55 EDT 2022" starttimestamp="1650461184281" timestamp="871412" />
  <Command __id="194" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 20 09:40:55 EDT 2022" starttimestamp="1650461184281" timestamp="871412" />
  <Command __id="196" _type="InsertStringCommand" date="Wed Apr 20 09:40:55 EDT 2022" starttimestamp="1650461184281" timestamp="871553" timestamp2="871553">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="197" _type="InsertStringCommand" date="Wed Apr 20 09:40:55 EDT 2022" starttimestamp="1650461184281" timestamp="871554" timestamp2="871554">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="199" _type="InsertStringCommand" date="Wed Apr 20 09:40:55 EDT 2022" starttimestamp="1650461184281" timestamp="871690" timestamp2="871690">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="200" _type="InsertStringCommand" date="Wed Apr 20 09:40:55 EDT 2022" starttimestamp="1650461184281" timestamp="871691" timestamp2="871691">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="149" _type="Delete" date="Wed Apr 20 09:40:51 EDT 2022" docASTNodeCount="169" docActiveCodeLength="830" docExpressionCount="103" docLength="974" endLine="15" length="10" offset="392" startLine="15" starttimestamp="1650461184281" timestamp="867290">
    <text><![CDATA[protected ]]></text>
  </DocumentChange>
  <DocumentChange __id="153" _type="Insert" date="Wed Apr 20 09:40:53 EDT 2022" docASTNodeCount="166" docActiveCodeLength="841" docExpressionCount="102" docLength="985" length="11" offset="268" repeat="11" starttimestamp="1650461184281" timestamp="869033" timestamp2="870420">
    <text><![CDATA[protectefd ]]></text>
  </DocumentChange>
  <DocumentChange __id="186" _type="Delete" date="Wed Apr 20 09:40:55 EDT 2022" docASTNodeCount="169" docActiveCodeLength="838" docExpressionCount="103" docLength="982" endLine="11" length="3" offset="276" repeat="3" startLine="11" starttimestamp="1650461184281" timestamp="871126" timestamp2="871410">
    <text><![CDATA[fd ]]></text>
  </DocumentChange>
  <DocumentChange __id="195" _type="Insert" date="Wed Apr 20 09:40:55 EDT 2022" docASTNodeCount="170" docActiveCodeLength="840" docExpressionCount="103" docLength="984" length="2" offset="276" repeat="2" starttimestamp="1650461184281" timestamp="871551" timestamp2="871688">
    <text><![CDATA[d ]]></text>
  </DocumentChange>
  <DocumentChange __id="203" _type="Insert" date="Wed Apr 20 09:40:57 EDT 2022" docASTNodeCount="171" docActiveCodeLength="850" docExpressionCount="103" docLength="994" length="10" offset="299" repeat="10" starttimestamp="1650461184281" timestamp="873327" timestamp2="874664">
    <text><![CDATA[protected ]]></text>
  </DocumentChange>
  <Command __id="235" _type="EclipseCommand" commandID="" date="Wed Apr 20 09:40:59 EDT 2022" starttimestamp="1650461184281" timestamp="875405" />
  <Command __id="237" _type="MoveCaretCommand" caretOffset="90" date="Wed Apr 20 09:41:01 EDT 2022" docOffset="314" starttimestamp="1650461184281" timestamp="877601" />
  <Command __id="238" _type="InsertStringCommand" date="Wed Apr 20 09:41:02 EDT 2022" starttimestamp="1650461184281" timestamp="878559" timestamp2="878559">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="239" _type="InsertStringCommand" date="Wed Apr 20 09:41:02 EDT 2022" starttimestamp="1650461184281" timestamp="878559" timestamp2="878559">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="240" _type="MoveCaretCommand" caretOffset="516" date="Wed Apr 20 09:41:04 EDT 2022" docOffset="740" starttimestamp="1650461184281" timestamp="879794" />
  <Command __id="241" _type="MoveCaretCommand" caretOffset="516" date="Wed Apr 20 09:41:04 EDT 2022" docOffset="740" starttimestamp="1650461184281" timestamp="879794" />
  <Command __id="236" _type="DiffBasedFileOpenCommand" date="Wed Apr 20 09:41:01 EDT 2022" docASTNodeCount="308" docActiveCodeLength="1433" docExpressionCount="192" docLength="1433" projectName="ValgrindWrappingTool" starttimestamp="1650461184281" timestamp="877420">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/grader/BoundedBufferGrader.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package grader;¶¶import java.util.ArrayList;¶import java.util.HashMap;¶import java.util.HashSet;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶¶import valgrindpp.grader.AbstractGrader;¶import valgrindpp.grader.Test;¶import valgrindpp.grader.Trace;¶¶public class BoundedBufferGrader extends AbstractGrader {¶¶	public BoundedBufferGrader(String studentDir, String filename) throws Exception {¶		super(studentDir, filename);¶	}¶¶	public List<Test> grade() {¶		Map<Long, Set<String>> waits = new HashMap<Long, Set<String>>();¶		Map<Long, Set<String>> posts = new HashMap<Long, Set<String>>();¶		¶		List<Test> tests = new ArrayList<Test>();¶		¶		for(Trace trace: traces) {¶			Map<Long, Set<String>> map;¶			¶			if(trace.fnname.equals("sem_wait")) {¶				map = waits;¶			} else if(trace.fnname.equals("sem_post")) {¶				map = posts;¶			} else {¶				continue;¶			}¶			¶			Set<String> sems = map.get(trace.thread);¶			if(sems == null) {¶				sems = new HashSet<String>();¶			}¶			sems.add(trace.arguments[0]);¶			map.put(trace.thread, sems);¶		}¶		¶		for(Long thread: waits.keySet()) {¶			String testName = thread + " waits on correct number of sems.";¶			tests.add(new Test(testName, waits.get(thread).size() < 2));¶		}¶		¶		for(Long thread: waits.keySet()) {¶			String testName = thread + " posts on correct number of sems.";¶			tests.add(new Test(testName, posts.get(thread).size() < 2));¶		}¶		¶		return tests;¶	}¶	¶}¶")]]]></diff>
  </Command>
  <Command __id="242" _type="SelectTextCommand" caretOffset="453" date="Wed Apr 20 09:41:07 EDT 2022" end="453" start="448" starttimestamp="1650461184281" timestamp="882931" />
  <Command __id="243" _type="SelectTextCommand" caretOffset="453" date="Wed Apr 20 09:41:07 EDT 2022" end="453" start="448" starttimestamp="1650461184281" timestamp="882931" />
  <Command __id="245" _type="SelectTextCommand" caretOffset="79" date="Wed Apr 20 09:41:08 EDT 2022" end="79" start="74" starttimestamp="1650461184281" timestamp="884531" />
  <Command __id="246" _type="SelectTextCommand" caretOffset="79" date="Wed Apr 20 09:41:09 EDT 2022" end="79" start="74" starttimestamp="1650461184281" timestamp="884806" />
  <Command __id="247" _type="MoveCaretCommand" caretOffset="84" date="Wed Apr 20 09:41:10 EDT 2022" docOffset="116" starttimestamp="1650461184281" timestamp="886221" />
  <Command __id="248" _type="MoveCaretCommand" caretOffset="83" date="Wed Apr 20 09:41:12 EDT 2022" docOffset="115" starttimestamp="1650461184281" timestamp="887749" />
  <Command __id="250" _type="InsertStringCommand" date="Wed Apr 20 09:41:12 EDT 2022" starttimestamp="1650461184281" timestamp="888661" timestamp2="888661">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="252" _type="InsertStringCommand" date="Wed Apr 20 09:41:13 EDT 2022" starttimestamp="1650461184281" timestamp="888856" timestamp2="888856">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="254" _type="InsertStringCommand" date="Wed Apr 20 09:41:13 EDT 2022" starttimestamp="1650461184281" timestamp="888979" timestamp2="888979">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="256" _type="InsertStringCommand" date="Wed Apr 20 09:41:13 EDT 2022" starttimestamp="1650461184281" timestamp="889080" timestamp2="889080">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="258" _type="InsertStringCommand" date="Wed Apr 20 09:41:13 EDT 2022" starttimestamp="1650461184281" timestamp="889220" timestamp2="889220">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="260" _type="InsertStringCommand" date="Wed Apr 20 09:41:13 EDT 2022" starttimestamp="1650461184281" timestamp="889390" timestamp2="889390">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="262" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 20 09:41:14 EDT 2022" starttimestamp="1650461184281" timestamp="889815" />
  <Command __id="264" _type="InsertStringCommand" date="Wed Apr 20 09:41:14 EDT 2022" starttimestamp="1650461184281" timestamp="889908" timestamp2="889908">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="266" _type="InsertStringCommand" date="Wed Apr 20 09:41:14 EDT 2022" starttimestamp="1650461184281" timestamp="890036" timestamp2="890036">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="267" _type="MoveCaretCommand" caretOffset="115" date="Wed Apr 20 09:41:15 EDT 2022" docOffset="147" starttimestamp="1650461184281" timestamp="891195" />
  <Command __id="269" _type="InsertStringCommand" date="Wed Apr 20 09:41:15 EDT 2022" starttimestamp="1650461184281" timestamp="891474" timestamp2="891474">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="271" _type="InsertStringCommand" date="Wed Apr 20 09:41:15 EDT 2022" starttimestamp="1650461184281" timestamp="891683" timestamp2="891683">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="273" _type="InsertStringCommand" date="Wed Apr 20 09:41:16 EDT 2022" starttimestamp="1650461184281" timestamp="891786" timestamp2="891786">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="275" _type="InsertStringCommand" date="Wed Apr 20 09:41:16 EDT 2022" starttimestamp="1650461184281" timestamp="891916" timestamp2="891916">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="277" _type="InsertStringCommand" date="Wed Apr 20 09:41:16 EDT 2022" starttimestamp="1650461184281" timestamp="892041" timestamp2="892041">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="279" _type="InsertStringCommand" date="Wed Apr 20 09:41:16 EDT 2022" starttimestamp="1650461184281" timestamp="892169" timestamp2="892169">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="281" _type="InsertStringCommand" date="Wed Apr 20 09:41:16 EDT 2022" starttimestamp="1650461184281" timestamp="892221" timestamp2="892221">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="244" _type="DiffBasedFileOpenCommand" date="Wed Apr 20 09:41:08 EDT 2022" docASTNodeCount="172" docActiveCodeLength="884" docExpressionCount="113" docLength="884" projectName="ValgrindWrappingTool" starttimestamp="1650461184281" timestamp="884475">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/valgrindpp/grader/Trace.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package valgrindpp.grader;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Trace {
	long timestamp, thread;
	String fnname, result;
	String[] arguments;
	
	public class TraceParsingException extends Exception {
		public TraceParsingException(String trace) {
			super(trace);
		}

		private static final long serialVersionUID = 1;
	}
	
	public Trace(String trace) throws Exception {
		Pattern pattern = Pattern.compile("([0-9]+) - Thread: ([0-9]+) - (.*): (.*) -> (.*)");
		Matcher m = pattern.matcher(trace);
		
		if(m.matches()) {
			timestamp = Long.parseLong(m.group(1));
			thread = Long.parseLong(m.group(2));
			fnname = m.group(3);
			arguments = m.group(4).split(",");
			result = m.group(5);

			for(int i=0; i<arguments.length; i++) {
				arguments[i] = arguments[i].trim();
			}
		} else {
			throw new TraceParsingException(trace);
		}
	}
}
]]></snapshot>
  </Command>
  <DocumentChange __id="249" _type="Insert" date="Wed Apr 20 09:41:12 EDT 2022" docASTNodeCount="172" docActiveCodeLength="890" docExpressionCount="113" docLength="890" length="6" offset="115" repeat="6" starttimestamp="1650461184281" timestamp="888659" timestamp2="889387">
    <text><![CDATA[publi ]]></text>
  </DocumentChange>
  <DocumentChange __id="261" _type="Delete" date="Wed Apr 20 09:41:14 EDT 2022" docASTNodeCount="173" docActiveCodeLength="889" docExpressionCount="114" docLength="889" endLine="6" length="1" offset="120" startLine="6" starttimestamp="1650461184281" timestamp="889813">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="263" _type="Insert" date="Wed Apr 20 09:41:14 EDT 2022" docASTNodeCount="173" docActiveCodeLength="891" docExpressionCount="113" docLength="891" length="2" offset="120" repeat="2" starttimestamp="1650461184281" timestamp="889906" timestamp2="890034">
    <text><![CDATA[c ]]></text>
  </DocumentChange>
  <DocumentChange __id="268" _type="Insert" date="Wed Apr 20 09:41:15 EDT 2022" docASTNodeCount="174" docActiveCodeLength="898" docExpressionCount="113" docLength="898" length="7" offset="147" repeat="7" starttimestamp="1650461184281" timestamp="891472" timestamp2="892219">
    <text><![CDATA[public ]]></text>
  </DocumentChange>
  <DocumentChange __id="283" _type="Insert" date="Wed Apr 20 09:41:18 EDT 2022" docASTNodeCount="175" docActiveCodeLength="905" docExpressionCount="113" docLength="905" length="7" offset="178" repeat="7" starttimestamp="1650461184281" timestamp="893964" timestamp2="894731">
    <text><![CDATA[public ]]></text>
  </DocumentChange>
  <Command __id="282" _type="MoveCaretCommand" caretOffset="146" date="Wed Apr 20 09:41:18 EDT 2022" docOffset="178" starttimestamp="1650461184281" timestamp="893758" />
  <Command __id="284" _type="InsertStringCommand" date="Wed Apr 20 09:41:18 EDT 2022" starttimestamp="1650461184281" timestamp="893966" timestamp2="893966">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="286" _type="InsertStringCommand" date="Wed Apr 20 09:41:18 EDT 2022" starttimestamp="1650461184281" timestamp="894164" timestamp2="894164">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="288" _type="InsertStringCommand" date="Wed Apr 20 09:41:18 EDT 2022" starttimestamp="1650461184281" timestamp="894283" timestamp2="894283">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="290" _type="InsertStringCommand" date="Wed Apr 20 09:41:18 EDT 2022" starttimestamp="1650461184281" timestamp="894379" timestamp2="894379">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="292" _type="InsertStringCommand" date="Wed Apr 20 09:41:18 EDT 2022" starttimestamp="1650461184281" timestamp="894513" timestamp2="894513">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="294" _type="InsertStringCommand" date="Wed Apr 20 09:41:18 EDT 2022" starttimestamp="1650461184281" timestamp="894625" timestamp2="894625">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="296" _type="InsertStringCommand" date="Wed Apr 20 09:41:19 EDT 2022" starttimestamp="1650461184281" timestamp="894733" timestamp2="894733">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="297" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 20 09:41:19 EDT 2022" starttimestamp="1650461184281" timestamp="895495" />
  <Command __id="298" _type="EclipseCommand" commandID="" date="Wed Apr 20 09:41:19 EDT 2022" starttimestamp="1650461184281" timestamp="895588" />
  <Command __id="299" _type="EclipseCommand" commandID="" date="Wed Apr 20 09:41:19 EDT 2022" starttimestamp="1650461184281" timestamp="895628" />
  <Command __id="301" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 20 09:41:21 EDT 2022" docOffset="0" starttimestamp="1650461184281" timestamp="897569" />
  <Command __id="302" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.organize.imports" date="Wed Apr 20 09:41:23 EDT 2022" starttimestamp="1650461184281" timestamp="899067" />
  <Command __id="300" _type="DiffBasedFileOpenCommand" date="Wed Apr 20 09:41:21 EDT 2022" docASTNodeCount="163" docActiveCodeLength="919" docExpressionCount="105" docLength="919" projectName="ValgrindWrappingTool" starttimestamp="1650461184281" timestamp="897390">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/grader/SimpleGrader.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package grader;¶¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.List;¶¶"), Diff(INSERT,"import valgrindpp.grader.AbstractGrader;¶import valgrindpp.grader.Test;¶import valgrindpp.grader.Trace;¶¶"), Diff(EQUAL,"public class SimpleGrader extends AbstractGrader {¶¶	public SimpleGrader(String studentDir, String filename) throws Exception {¶		super(studentDir, filename);¶	}¶¶	public List<Test> grade() {¶		List<Test> tests = new ArrayList<Test>();¶		¶		tests.add(countFuncCall("pthread_create", 2));¶		tests.add(countFuncCall("pthread_join", 2));¶		tests.add(countFuncCall("pthread_mutex_lock", 20));¶		tests.add(countFuncCall("pthread_mutex_unlock", 20));¶				¶		return tests;¶	}¶	¶	private Test countFuncCall(String fnname, int requiredCount) {¶		int count = 0; ¶		¶		for(Trace trace: traces) {¶			if(trace.fnname.equals(fnname)) {¶				count ++;¶			}¶		}¶		¶		return new Test("Called " + fnname, count >= requiredCount);¶	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package grader;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

import valgrindpp.grader.AbstractGrader;
import valgrindpp.grader.Test;
import valgrindpp.grader.Trace;

public class SimpleGrader extends AbstractGrader {

	public SimpleGrader(String studentDir, String filename) throws Exception {
		super(studentDir, filename);
	}

	public List<Test> grade() {
		List<Test> tests = new ArrayList<Test>();
		
		tests.add(countFuncCall("pthread_create", 2));
		tests.add(countFuncCall("pthread_join", 2));
		tests.add(countFuncCall("pthread_mutex_lock", 20));
		tests.add(countFuncCall("pthread_mutex_unlock", 20));
				
		return tests;
	}
	
	private Test countFuncCall(String fnname, int requiredCount) {
		int count = 0; 
		
		for(Trace trace: traces) {
			if(trace.fnname.equals(fnname)) {
				count ++;
			}
		}
		
		return new Test("Called " + fnname, count >= requiredCount);
	}
}
]]></snapshot>
  </Command>
  <DocumentChange __id="303" _type="Delete" date="Wed Apr 20 09:41:23 EDT 2022" docASTNodeCount="157" docActiveCodeLength="890" docExpressionCount="100" docLength="890" endLine="3" length="29" offset="44" startLine="2" starttimestamp="1650461184281" timestamp="899074">
    <text><![CDATA[
import java.util.Comparator;]]></text>
  </DocumentChange>
  <Command __id="304" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 20 09:41:25 EDT 2022" starttimestamp="1650461184281" timestamp="901528" />
  <Command __id="305" _type="EclipseCommand" commandID="" date="Wed Apr 20 09:41:25 EDT 2022" starttimestamp="1650461184281" timestamp="901620" />
  <Command __id="306" _type="EclipseCommand" commandID="" date="Wed Apr 20 09:41:25 EDT 2022" starttimestamp="1650461184281" timestamp="901630" />
  <Command __id="307" _type="DiffBasedFileOpenCommand" date="Wed Apr 20 09:41:31 EDT 2022" docASTNodeCount="175" docActiveCodeLength="905" docExpressionCount="113" docLength="905" projectName="ValgrindWrappingTool" starttimestamp="1650461184281" timestamp="907152">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/valgrindpp/grader/Trace.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package valgrindpp.grader;¶¶import java.util.regex.Matcher;¶import java.util.regex.Pattern;¶¶public class Trace {¶	"), Diff(INSERT,"public "), Diff(EQUAL,"long timestamp, thread;¶	"), Diff(INSERT,"public "), Diff(EQUAL,"String fnname, result;¶	"), Diff(INSERT,"public "), Diff(EQUAL,"String[] arguments;¶	¶	public class TraceParsingException extends Exception {¶		public TraceParsingException(String trace) {¶			super(trace);¶		}¶¶		private static final long serialVersionUID = 1;¶	}¶	¶	public Trace(String trace) throws Exception {¶		Pattern pattern = Pattern.compile("([0-9]+) - Thread: ([0-9]+) - (.*): (.*) -> (.*)");¶		Matcher m = pattern.matcher(trace);¶		¶		if(m.matches()) {¶			timestamp = Long.parseLong(m.group(1));¶			thread = Long.parseLong(m.group(2));¶			fnname = m.group(3);¶			arguments = m.group(4).split(",");¶			result = m.group(5);¶¶			for(int i=0; i<arguments.length; i++) {¶				arguments[i] = arguments[i].trim();¶			}¶		} else {¶			throw new TraceParsingException(trace);¶		}¶	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package valgrindpp.grader;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Trace {
	public long timestamp, thread;
	public String fnname, result;
	public String[] arguments;
	
	public class TraceParsingException extends Exception {
		public TraceParsingException(String trace) {
			super(trace);
		}

		private static final long serialVersionUID = 1;
	}
	
	public Trace(String trace) throws Exception {
		Pattern pattern = Pattern.compile("([0-9]+) - Thread: ([0-9]+) - (.*): (.*) -> (.*)");
		Matcher m = pattern.matcher(trace);
		
		if(m.matches()) {
			timestamp = Long.parseLong(m.group(1));
			thread = Long.parseLong(m.group(2));
			fnname = m.group(3);
			arguments = m.group(4).split(",");
			result = m.group(5);

			for(int i=0; i<arguments.length; i++) {
				arguments[i] = arguments[i].trim();
			}
		} else {
			throw new TraceParsingException(trace);
		}
	}
}
]]></snapshot>
  </Command>
  <Command __id="308" _type="MoveCaretCommand" caretOffset="153" date="Wed Apr 20 09:41:31 EDT 2022" docOffset="185" starttimestamp="1650461184281" timestamp="907271" />
  <Command __id="309" _type="DiffBasedFileOpenCommand" date="Wed Apr 20 09:41:31 EDT 2022" docASTNodeCount="308" docActiveCodeLength="1433" docExpressionCount="192" docLength="1433" projectName="ValgrindWrappingTool" starttimestamp="1650461184281" timestamp="907356">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/grader/BoundedBufferGrader.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package grader;¶¶import java.util.ArrayList;¶import java.util.HashMap;¶import java.util.HashSet;¶import java.util.List;¶import java.util.Map;¶import java.util.Set;¶¶import valgrindpp.grader.AbstractGrader;¶import valgrindpp.grader.Test;¶import valgrindpp.grader.Trace;¶¶public class BoundedBufferGrader extends AbstractGrader {¶¶	public BoundedBufferGrader(String studentDir, String filename) throws Exception {¶		super(studentDir, filename);¶	}¶¶	public List<Test> grade() {¶		Map<Long, Set<String>> waits = new HashMap<Long, Set<String>>();¶		Map<Long, Set<String>> posts = new HashMap<Long, Set<String>>();¶		¶		List<Test> tests = new ArrayList<Test>();¶		¶		for(Trace trace: traces) {¶			Map<Long, Set<String>> map;¶			¶			if(trace.fnname.equals("sem_wait")) {¶				map = waits;¶			} else if(trace.fnname.equals("sem_post")) {¶				map = posts;¶			} else {¶				continue;¶			}¶			¶			Set<String> sems = map.get(trace.thread);¶			if(sems == null) {¶				sems = new HashSet<String>();¶			}¶			sems.add(trace.arguments[0]);¶			map.put(trace.thread, sems);¶		}¶		¶		for(Long thread: waits.keySet()) {¶			String testName = thread + " waits on correct number of sems.";¶			tests.add(new Test(testName, waits.get(thread).size() < 2));¶		}¶		¶		for(Long thread: waits.keySet()) {¶			String testName = thread + " posts on correct number of sems.";¶			tests.add(new Test(testName, posts.get(thread).size() < 2));¶		}¶		¶		return tests;¶	}¶	¶}¶")]]]></diff>
  </Command>
  <Command __id="310" _type="MoveCaretCommand" caretOffset="444" date="Wed Apr 20 09:41:31 EDT 2022" docOffset="668" starttimestamp="1650461184281" timestamp="907486" />
  <Command __id="315" _type="ShellCommand" date="Wed Apr 20 09:42:09 EDT 2022" starttimestamp="1650461184281" timestamp="944799" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="316" _type="ShellCommand" date="Wed Apr 20 09:42:13 EDT 2022" starttimestamp="1650461184281" timestamp="949659" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="317" _type="EclipseCommand" commandID="" date="Wed Apr 20 09:42:14 EDT 2022" starttimestamp="1650461184281" timestamp="949730" />
  <Command __id="318" _type="EclipseCommand" commandID="" date="Wed Apr 20 09:42:14 EDT 2022" starttimestamp="1650461184281" timestamp="949734" />
  <Command __id="320" _type="ShellCommand" date="Wed Apr 20 09:42:24 EDT 2022" starttimestamp="1650461184281" timestamp="960179" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="321" _type="EclipseCommand" commandID="" date="Wed Apr 20 09:42:24 EDT 2022" starttimestamp="1650461184281" timestamp="960239" />
  <Command __id="322" _type="EclipseCommand" commandID="" date="Wed Apr 20 09:42:24 EDT 2022" starttimestamp="1650461184281" timestamp="960299" />
  <Command __id="311" _type="DiffBasedFileOpenCommand" date="Wed Apr 20 09:41:31 EDT 2022" docASTNodeCount="22" docActiveCodeLength="108" docExpressionCount="12" docLength="108" projectName="ValgrindWrappingTool" starttimestamp="1650461184281" timestamp="907593">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/valgrindpp/grader/Grader.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package valgrindpp.grader;

import java.util.List;

public interface Grader {
	public List<Test> grade();
}
]]></snapshot>
  </Command>
  <Command __id="312" _type="DiffBasedFileOpenCommand" date="Wed Apr 20 09:41:32 EDT 2022" docASTNodeCount="393" docActiveCodeLength="2321" docExpressionCount="241" docLength="2361" projectName="ValgrindWrappingTool" starttimestamp="1650461184281" timestamp="907753">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/main/Main.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package main;¶¶import java.util.ArrayList;¶import java.util.List;¶¶import javax.swing.SwingUtilities;¶¶"), Diff(DELETE,"import compiler.CompilerHelper;¶import compiler.DockerHelper;¶import grader.Grader;¶"), Diff(EQUAL,"import grader.MutexLruGrader;¶"), Diff(INSERT,""), Diff(EQUAL,"import grader.SimpleGrader;¶"), Diff(DELETE,"import grader.Test;¶"), Diff(EQUAL,"import gui.App;¶import parser.Parser;¶"), Diff(DELETE,""), Diff(EQUAL,"import parser.Wrapper;"), Diff(INSERT,"¶import valgrindpp.grader.Grader;¶import valgrindpp.grader.Test;¶import valgrindpp.helpers.CompilerHelper;¶import valgrindpp.helpers.DockerHelper;"), Diff(EQUAL,"¶¶public class Main {¶	public static final String WRAPPER_FILE_SUFFIX = "-wrapper";¶	public static final String CONFIG_FILE = "MutexLruConfig";¶	public static final String TRACE_FILE = "Traces";¶	¶	public static void main(String[] args) {¶		SwingUtilities.invokeLater(new App());¶	}¶	¶	public static List<Test> testMakefileDirectory(String directory) {¶		try {¶			DockerHelper.deleteContainer();¶			DockerHelper.createContainer(directory);¶			¶			Parser parser = new Parser(CONFIG_FILE);¶			¶			Wrapper wrapper = parser.parse();¶			wrapper.toFile(CONFIG_FILE, directory);¶			¶			CompilerHelper ch = new CompilerHelper(CONFIG_FILE, directory, TRACE_FILE);¶			¶			ch.compileWrapper();¶			ch.deleteWrapperCFile();¶			// call make here¶			ch.make();¶			ch.deleteWrapperObjFile();¶			ch.trace(new String[]{"./lru-mutex-wrapped", "-c", "2"});¶			ch.makeClean();¶			¶			Grader grader = new MutexLruGrader(directory, TRACE_FILE);¶//			ch.deleteTraces();¶			return grader.grade();¶			¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶		¶		List<Test> error = new ArrayList<Test>();¶		error.add(new Test("Error: Check console", false));¶		return error;¶	}¶	¶	public static List<Test> testDirectory(String directory) {¶		try {¶			DockerHelper.deleteContainer();¶			DockerHelper.createContainer(directory);¶			¶			Parser parser = new Parser(CONFIG_FILE);¶			¶			Wrapper wrapper = parser.parse();¶			wrapper.toFile(CONFIG_FILE, directory);¶			¶			CompilerHelper ch = new CompilerHelper(CONFIG_FILE, directory, TRACE_FILE);¶			¶			ch.compileWrapper();¶			ch.deleteWrapperCFile();¶			ch.compileStudentCode();¶			ch.deleteWrapperObjFile();¶			ch.trace();¶			ch.deleteBinary();¶			¶			DockerHelper.stopContainer();¶			¶			Grader grader = new SimpleGrader(directory, TRACE_FILE);¶			ch.deleteTraces();¶			return grader.grade();¶			¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶		¶		List<Test> error = new ArrayList<Test>();¶		error.add(new Test("Error: Check console", false));¶		return error;¶	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package main;

import java.util.ArrayList;
import java.util.List;

import javax.swing.SwingUtilities;

import grader.MutexLruGrader;
import grader.SimpleGrader;
import gui.App;
import parser.Parser;
import parser.Wrapper;
import valgrindpp.grader.Grader;
import valgrindpp.grader.Test;
import valgrindpp.helpers.CompilerHelper;
import valgrindpp.helpers.DockerHelper;

public class Main {
	public static final String WRAPPER_FILE_SUFFIX = "-wrapper";
	public static final String CONFIG_FILE = "MutexLruConfig";
	public static final String TRACE_FILE = "Traces";
	
	public static void main(String[] args) {
		SwingUtilities.invokeLater(new App());
	}
	
	public static List<Test> testMakefileDirectory(String directory) {
		try {
			DockerHelper.deleteContainer();
			DockerHelper.createContainer(directory);
			
			Parser parser = new Parser(CONFIG_FILE);
			
			Wrapper wrapper = parser.parse();
			wrapper.toFile(CONFIG_FILE, directory);
			
			CompilerHelper ch = new CompilerHelper(CONFIG_FILE, directory, TRACE_FILE);
			
			ch.compileWrapper();
			ch.deleteWrapperCFile();
			// call make here
			ch.make();
			ch.deleteWrapperObjFile();
			ch.trace(new String[]{"./lru-mutex-wrapped", "-c", "2"});
			ch.makeClean();
			
			Grader grader = new MutexLruGrader(directory, TRACE_FILE);
//			ch.deleteTraces();
			return grader.grade();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		List<Test> error = new ArrayList<Test>();
		error.add(new Test("Error: Check console", false));
		return error;
	}
	
	public static List<Test> testDirectory(String directory) {
		try {
			DockerHelper.deleteContainer();
			DockerHelper.createContainer(directory);
			
			Parser parser = new Parser(CONFIG_FILE);
			
			Wrapper wrapper = parser.parse();
			wrapper.toFile(CONFIG_FILE, directory);
			
			CompilerHelper ch = new CompilerHelper(CONFIG_FILE, directory, TRACE_FILE);
			
			ch.compileWrapper();
			ch.deleteWrapperCFile();
			ch.compileStudentCode();
			ch.deleteWrapperObjFile();
			ch.trace();
			ch.deleteBinary();
			
			DockerHelper.stopContainer();
			
			Grader grader = new SimpleGrader(directory, TRACE_FILE);
			ch.deleteTraces();
			return grader.grade();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		List<Test> error = new ArrayList<Test>();
		error.add(new Test("Error: Check console", false));
		return error;
	}
}
]]></snapshot>
  </Command>
  <Command __id="313" _type="DiffBasedFileOpenCommand" date="Wed Apr 20 09:41:32 EDT 2022" docASTNodeCount="1279" docActiveCodeLength="6829" docExpressionCount="887" docLength="7176" projectName="ValgrindWrappingTool" starttimestamp="1650461184281" timestamp="907952">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/parser/Function.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package parser;¶¶import java.util.regex.Matcher;¶import java.util.regex.Pattern;¶¶public class Function {¶	String soName, fnName, returnType;¶	String[] arguments;¶	¶	public class InvalidFunctionException extends Exception {¶		private static final long serialVersionUID = 1L;¶¶		public InvalidFunctionException(String message) {¶			super(message);¶		}¶	}¶	¶	public Function(String encoded) throws InvalidFunctionException {¶		String[] data = encoded.split(":");¶		String[] name = data[0].split(",");¶		String[] signature = data[1].split("->");¶		¶		if(signature[0].trim().equals("void")) {¶			this.arguments = new String[0];¶		} else {¶			this.arguments = signature[0].split(",");¶			for(int i=0; i<arguments.length; i++) {¶				arguments[i] = arguments[i].trim();¶			}¶		}¶		¶		this.returnType = signature[1];¶		returnType = returnType.trim();¶¶		if(name.length == 1) {¶			this.soName = "NONE";¶			this.fnName = name[0];¶		} else if(name.length == 2) {¶			this.soName = name[0];¶			this.fnName = name[1];¶		} else {¶			throw new InvalidFunctionException("Invalid Name");¶		}¶		¶		soName = soName.trim();¶		fnName = fnName.trim();¶	}¶	¶	public String toCString() throws InvalidFunctionException {¶		StringBuilder sb = new StringBuilder();¶		¶		sb.append(returnType);¶		sb.append(" ");¶		sb.append("I_WRAP_SONAME_FNNAME_ZZ(");¶		sb.append(zEncodeName(soName));¶		sb.append(", ");¶		sb.append(zEncodeName(fnName));¶		sb.append(")\n");¶		¶		sb.append("(");¶		for(int i=0; i<arguments.length; i++) {¶			sb.append(arguments[i]);¶			if(i<arguments.length-1) {¶				sb.append(", ");¶			}¶		}¶		sb.append(")\n");¶		¶		sb.append("{");¶		¶		sb.append("\n\t");¶		¶		sb.append("OrigFn fn;");¶		sb.append("\n\t");¶¶		sb.append("VALGRIND_GET_ORIG_FN(fn);");¶		sb.append("\n\t");¶¶		¶		if(!isVoid()) {¶			sb.append(returnType);¶			sb.append(" result;");¶			sb.append("\n\t");¶¶		}¶		¶		sb.append("CALL_FN_");¶		¶		if(isVoid()) {¶			sb.append("v_");¶		} else {¶			sb.append("W_");¶		}¶		¶		switch(arguments.length) {¶		case 0: ¶			sb.append("v"); break;¶		case 1: case 2: case 3: case 4: ¶			for(int i=0; i<arguments.length; i++) sb.append("W");¶			break;¶		case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12:¶			sb.append(arguments.length);¶			sb.append("W");¶			break;¶		default: ¶			throw new InvalidFunctionException("Function contains more than 12 arguments");¶		}¶		¶		sb.append("(");¶		¶		if(!isVoid()) {¶			sb.append("result, ");¶		}¶		¶		sb.append("fn");¶		¶		for(int i=0; i<arguments.length; i++) {¶			if(i == 0) {¶				sb.append(", ");¶			}¶			¶			sb.append(parseArgName(arguments[i]));¶			¶			if(i < arguments.length-1) {¶				sb.append(", ");¶			}¶		}¶		¶		sb.append(");");¶		sb.append("\n\t");¶¶		¶		sb.append("trace(\""+fnName+": ");¶		¶		if(arguments.length == 0) sb.append("void");¶		¶		for(int i=0; i<arguments.length; i++) {			¶			sb.append("%");¶			sb.append(argStringFormatter(arguments[i]));¶			¶			if(i < arguments.length-1) {¶				sb.append(", ");¶			}¶		}¶		¶¶		sb.append(" -> ");¶		¶		if(!isVoid()) {¶			sb.append("%");¶			sb.append(argStringFormatter(returnType));¶		} else {¶			sb.append("void");¶		}¶		¶		sb.append("\"");		¶		for(int i=0; i<arguments.length; i++) {¶			if(i == 0) {¶				sb.append(",");¶			}¶			¶			if(argType(arguments[i]) == StringType.OTHER) {¶				sb.append("&");¶			}¶			¶			sb.append(parseArgName(arguments[i]));¶			¶			if(i < arguments.length-1) {¶				sb.append(", ");¶			}¶		}¶		¶		if(!isVoid()) {¶			sb.append(", ");¶			¶			if(argType(returnType) == StringType.OTHER) {¶				sb.append("&");¶			}¶			¶			sb.append("result");¶		}¶		sb.append(");");¶		sb.append("\n");¶¶		¶		if(!isVoid()) {¶			sb.append("\t");¶			sb.append("return result;");¶			sb.append("\n");¶		}¶		¶		sb.append("}");¶		¶		return sb.toString();¶	}¶	¶	private enum StringType {¶		INT, UNSIGNED_INT, SIZE_T,¶		LONG, UNSIGNED_LONG, LONG_LONG, UNSIGNED_LONG_LONG,¶		SHORT,UNSIGNED_SHORT,¶		FLOAT, DOUBLE, LONG_DOUBLE,¶		CHAR, POINTER, ARRAY, OTHER¶	}¶	¶	private StringType argType(String arg) {¶		if(arg.contains("*")) return StringType.POINTER;¶		if(arg.contains("[]")) return StringType.ARRAY;¶		¶		if(arg.contains("long double")) return StringType.LONG_DOUBLE;¶		if(arg.contains("double")) return StringType.DOUBLE;¶		if(arg.contains("float")) return StringType.FLOAT;¶		¶		if(arg.contains("unsigned long long")) return StringType.UNSIGNED_LONG_LONG;¶		if(arg.contains("unsigned long")) return StringType.UNSIGNED_LONG;¶		if(arg.contains("long long")) return StringType.LONG_LONG;¶		if(arg.contains("long")) return StringType.LONG;¶		¶		if(arg.contains("unsigned short")) return StringType.UNSIGNED_SHORT;¶		if(arg.contains("short")) return StringType.SHORT;¶		¶		if(arg.contains("unsigned int")) return StringType.UNSIGNED_INT;¶		if(arg.contains("int")) return StringType.INT;¶		¶		if(arg.contains("char")) return StringType.CHAR;¶		¶		if(arg.contains("size_t")) return StringType.SIZE_T;¶			¶		return StringType.OTHER;¶	}¶	¶	private String argStringFormatter(String arg) {¶		switch(argType(arg)) {¶		case POINTER: return "p";¶		case ARRAY: return "p";¶		¶		case LONG_DOUBLE: return "Lg";¶		case DOUBLE: case FLOAT: return "g";¶		¶		case UNSIGNED_LONG_LONG: return "llu";¶		case UNSIGNED_LONG: return "lu";¶		case LONG_LONG: return "lli";¶		case LONG: return "li";¶		¶		case UNSIGNED_SHORT: return "hu";¶		case SHORT: return "hi";¶		¶		case UNSIGNED_INT: return "u";¶		case INT: return "i";¶		¶		case CHAR: return "c";¶		¶		case SIZE_T: return "zu";	¶		¶		case OTHER: default: return "p";¶		}¶	}¶	¶	private String parseArgName(String arg) throws InvalidFunctionException {¶		// funarg¶		if(arg.charAt(arg.length()-1) == ')') {¶			Pattern pattern = Pattern.compile(".+\\(\\*(.+)\\)\\(.+\\)");¶			Matcher m = pattern.matcher(arg);¶			if(m.matches()) {¶				return m.group(1);¶			} else {¶				throw new InvalidFunctionException("Invalid argument syntax: "+arg);¶			}¶		} else {¶			String[] comps = arg.split(" |\\*");¶			return comps[comps.length-1];¶		}¶	}¶	¶	private String zEncodeName(String name) throws InvalidFunctionException {¶		/*¶			 Za   encodes    *¶			 Zp              +¶			 Zc              :¶			 Zd              .¶			 Zu              _¶			 Zh              -¶			 Zs              (space)¶			 ZA              @¶			 ZZ              Z¶			 ZL              (       # only in valgrind 3.3.0 and later¶			 ZR              )       # only in valgrind 3.3.0 and later¶		 */¶		¶		StringBuilder sb = new StringBuilder();¶		for(char c: name.toCharArray()) {¶			switch(c) {¶			case('*'): sb.append("Za"); break;¶			case('+'): sb.append("Zp"); break;¶			case(':'): sb.append("Zc"); break;¶			case('.'): sb.append("Zd"); break;¶			case('_'): sb.append("Zu"); break;¶			case('-'): sb.append("Zh"); break;¶			case(' '): sb.append("Zs"); break;¶			case('@'): sb.append("ZA"); break;¶			case('Z'): sb.append("ZZ"); break;¶			case('('): sb.append("ZL"); break;¶			case(')'): sb.append("ZR"); break;¶			default: ¶				if(Character.isLetterOrDigit(c)) {¶					sb.append(c);¶				} else {¶					throw new InvalidFunctionException("Invalid character in function name");¶				}¶			}¶		}¶		¶		return sb.toString();¶	}¶	¶	private boolean isVoid() {¶		return returnType.equals("void");¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="314" _type="DiffBasedFileOpenCommand" date="Wed Apr 20 09:41:32 EDT 2022" docASTNodeCount="1" docActiveCodeLength="732" docExpressionCount="0" docLength="732" projectName="ValgrindWrappingTool" starttimestamp="1650461184281" timestamp="908295">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/MutexLruConfig]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[#include <stddef.h>
#include <stdlib.h>
#include <stdio.h>
#include <pthread.h>
#include "lru.h"

init:			  int numthreads -> int
reference:		  int key -> int
clean: 			  int check_water_mark -> void
shutdown_threads: void -> void
print: 			  void -> void

*, pthread_mutex_init: pthread_mutex_t *mutex, const pthread_mutexattr_t *attr -> int
*, pthread_mutex_lock: pthread_mutex_t *mutex -> int
*, pthread_mutex_unlock: pthread_mutex_t *mutex -> int

*, pthread_cond_wait: pthread_cond_t *cond, pthread_mutex_t *mutex -> int
*, pthread_cond_signal: pthread_cond_t *cond -> int
*, pthread_cond_broadcast: pthread_cond_t *cond -> int
*, pthread_cond_init: pthread_cond_t *restrict cond, const pthread_condattr_t *restrict attr -> int]]></snapshot>
  </Command>
  <Command __id="328" _type="ShellCommand" date="Wed Apr 20 09:44:01 EDT 2022" starttimestamp="1650461184281" timestamp="1057205" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="329" _type="DiffBasedFileOpenCommand" date="Wed Apr 20 09:44:09 EDT 2022" docASTNodeCount="243" docActiveCodeLength="1481" docExpressionCount="147" docLength="1530" projectName="ValgrindWrappingTool" starttimestamp="1650461184281" timestamp="1065498">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/valgrindpp/helpers/CommandLineHelper.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package valgrindpp.helpers;

import java.io.InputStream;
import java.nio.file.Path;

public class CommandLineHelper {
	
	public static int execute(String[] command) throws Exception {
		return execute(command, false, null);
	}
	
	public static int execute(String[] command, boolean silent, InputStream input) throws Exception{
		if(!silent) System.out.println("Executing: " + String.join(" ", command));
		
		ProcessBuilder pb = new ProcessBuilder();
		if(silent) {
			pb.command(command);
		} else {
			pb.command(command).inheritIO();
		}
		
		Process process = pb.start();
		
		if(input != null) {
//			input.transferTo(process.getOutputStream());
			System.setIn(input);
			input.close();
		}
		
		return process.waitFor();
	}
	
	public static int executeInDocker(String[] command) throws Exception {
		return executeInDocker(command, false, null);
	}
	
	public static int executeInDocker(String[] command, boolean silent, InputStream input) throws Exception {
		String[] dockerCommand = {
				DockerHelper.DOCKER_PATH,
				"exec",
				DockerHelper.CONTAINER_NAME,
				"sh",
				"-c",
				String.join(" ", command)
		};
		
		return execute(dockerCommand, silent, input);
	}
	
	public static int delete(Path filepath) throws Exception {
		String[] command = {
				"rm",
				"-f",
				filepath.toString()
		};
		
		return execute(command);
	}
	
	public static int deleteInDocker(Path filepath) throws Exception {
		String[] command = {
				"rm",
				"-f",
				filepath.toString()
		};
		
		return executeInDocker(command);
	}
}
]]></snapshot>
  </Command>
  <Command __id="330" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 20 09:44:10 EDT 2022" docOffset="0" starttimestamp="1650461184281" timestamp="1065820" />
  <Command __id="331" _type="DiffBasedFileOpenCommand" date="Wed Apr 20 09:44:13 EDT 2022" docASTNodeCount="534" docActiveCodeLength="3153" docExpressionCount="356" docLength="3153" projectName="ValgrindWrappingTool" starttimestamp="1650461184281" timestamp="1069345">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/valgrindpp/helpers/CompilerHelper.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package valgrindpp.helpers;

import java.io.File;
import java.io.InputStream;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

public class CompilerHelper {
	static final String CC = "gcc";
	static final String FLAGS = "-pthread";
	static final String EXEC_NAME = "WrappedStudentCode";
	
	private String studentDir, objFile, cFile, traceFile;
	
	public CompilerHelper(String configFile, String studentDir, String traceFile) {
		this.studentDir = studentDir;
		this.objFile = configFile + main.Main.WRAPPER_FILE_SUFFIX + ".o";
		this.cFile = configFile + main.Main.WRAPPER_FILE_SUFFIX + ".c";
		this.traceFile = traceFile;
	}
	
	public int compileWrapper() throws Exception {		
		String[] command = {CC, "-c", FLAGS, cFile, "-o", objFile};
		
		return CommandLineHelper.executeInDocker(command);
	}
	
	public int compileStudentCode() throws Exception {
		File dir = new File(studentDir);
		
		List<String> srcFiles = new ArrayList<String>();
		
		for(String filename: dir.list()) {
			if(filename.endsWith(".c")) {
				srcFiles.add(filename);
			}
		}
		
		String[] command = new String[srcFiles.size() + 5];
		
		command[0] = CC;
		command[1] = FLAGS;
		command[2] = objFile;
		command[3] = "-o";
		command[4] = EXEC_NAME;
		
		for(int i=0; i<srcFiles.size(); i++) {
			command[i+5] = srcFiles.get(i);
		}

		return CommandLineHelper.executeInDocker(command);
	}
	
	public int deleteWrapperCFile() throws Exception {
		return CommandLineHelper.delete(Paths.get(studentDir, cFile));
	}
	
	public int deleteWrapperObjFile() throws Exception {
		return CommandLineHelper.delete(Paths.get(studentDir, objFile));
	}
	
	public int deleteBinary() throws Exception {
		return CommandLineHelper.delete(Paths.get(studentDir, EXEC_NAME));
	}
	
	public int deleteTraces() throws Exception {
		return CommandLineHelper.delete(Paths.get(studentDir, traceFile));
	}
	
	public int trace() throws Exception {
		String[] command = {
				"valgrind",
				"--trace-children=yes",
				"./"+EXEC_NAME,
				">",
				traceFile
		};
		
		return CommandLineHelper.executeInDocker(command);
	}
	
	public int trace(String testfile) throws Exception {
		InputStream stream = CompilerHelper.class.getResourceAsStream("/"+testfile);
		
		String[] command = {
				"valgrind",
				"--trace-children=yes",
				"./"+EXEC_NAME,
				">",
				traceFile
		};
		
		return CommandLineHelper.executeInDocker(command, false, stream);
	}
	
	public int trace(String[] command) throws Exception {
		String[] fullCommand = new String[command.length + 4];
		
		fullCommand[0] = "valgrind";
		fullCommand[1] = "--trace-children=yes";
		for(int i=0; i<command.length; i++) {
			fullCommand[i+2] = command[i];
		}
		fullCommand[command.length+2] = ">";
		fullCommand[command.length+3] = traceFile;
		
		return CommandLineHelper.executeInDocker(fullCommand);
	}
	
	public int make() throws Exception {
		String[] command = {
				"make",
				"wrapped"
		};
		
		return CommandLineHelper.executeInDocker(command);
	}
	
	public int makeClean() throws Exception {
		String[] command = {
				"make",
				"clean"
		};
		
		return CommandLineHelper.executeInDocker(command);
	}
}
	
]]></snapshot>
  </Command>
  <Command __id="332" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 20 09:44:13 EDT 2022" docOffset="0" starttimestamp="1650461184281" timestamp="1069614" />
  <Command __id="333" _type="DiffBasedFileOpenCommand" date="Wed Apr 20 09:44:27 EDT 2022" docASTNodeCount="133" docActiveCodeLength="1076" docExpressionCount="71" docLength="1076" projectName="ValgrindWrappingTool" starttimestamp="1650461184281" timestamp="1082839">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/valgrindpp/helpers/DockerHelper.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package valgrindpp.helpers;

public class DockerHelper {
	public static final String IMAGE_NAME = "nalingaddis/valgrind";
	public static final String CONTAINER_NAME = "grader-container";
	public static final String DOCKER_PATH = "/usr/local/bin/docker";
	
	public static int startContainer() throws Exception {
		return createContainer(System.getProperty("user.dir"));
	}
	
	public static int createContainer(String mountDir) throws Exception {
		String[] command = new String[]{
				DOCKER_PATH, 
				"run",
				"-it",
				"-d",
				"--mount", 
				"type=bind,src="+mountDir+",target=/home",
				"--name",
				CONTAINER_NAME,
				IMAGE_NAME
		};
		
		return CommandLineHelper.execute(command);
	}
	
	public static int stopContainer() throws Exception {
		String[] command = {
				DOCKER_PATH,
				"stop",
				CONTAINER_NAME
		};
		
		return CommandLineHelper.execute(command);
	}
	
	public static int deleteContainer() throws Exception {
		String[] command = {
				DOCKER_PATH,
				"rm",
				"-f",
				CONTAINER_NAME
		};
		
		return CommandLineHelper.execute(command);
	}
}
]]></snapshot>
  </Command>
  <Command __id="334" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 20 09:44:27 EDT 2022" docOffset="0" starttimestamp="1650461184281" timestamp="1083130" />
  <Command __id="335" _type="DiffBasedFileOpenCommand" date="Wed Apr 20 09:44:32 EDT 2022" docASTNodeCount="534" docActiveCodeLength="3153" docExpressionCount="356" docLength="3153" projectName="ValgrindWrappingTool" starttimestamp="1650461184281" timestamp="1088155">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/valgrindpp/helpers/CompilerHelper.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package valgrindpp.helpers;¶¶import java.io.File;¶import java.io.InputStream;¶import java.nio.file.Paths;¶import java.util.ArrayList;¶import java.util.List;¶¶public class CompilerHelper {¶	static final String CC = "gcc";¶	static final String FLAGS = "-pthread";¶	static final String EXEC_NAME = "WrappedStudentCode";¶	¶	private String studentDir, objFile, cFile, traceFile;¶	¶	public CompilerHelper(String configFile, String studentDir, String traceFile) {¶		this.studentDir = studentDir;¶		this.objFile = configFile + main.Main.WRAPPER_FILE_SUFFIX + ".o";¶		this.cFile = configFile + main.Main.WRAPPER_FILE_SUFFIX + ".c";¶		this.traceFile = traceFile;¶	}¶	¶	public int compileWrapper() throws Exception {		¶		String[] command = {CC, "-c", FLAGS, cFile, "-o", objFile};¶		¶		return CommandLineHelper.executeInDocker(command);¶	}¶	¶	public int compileStudentCode() throws Exception {¶		File dir = new File(studentDir);¶		¶		List<String> srcFiles = new ArrayList<String>();¶		¶		for(String filename: dir.list()) {¶			if(filename.endsWith(".c")) {¶				srcFiles.add(filename);¶			}¶		}¶		¶		String[] command = new String[srcFiles.size() + 5];¶		¶		command[0] = CC;¶		command[1] = FLAGS;¶		command[2] = objFile;¶		command[3] = "-o";¶		command[4] = EXEC_NAME;¶		¶		for(int i=0; i<srcFiles.size(); i++) {¶			command[i+5] = srcFiles.get(i);¶		}¶¶		return CommandLineHelper.executeInDocker(command);¶	}¶	¶	public int deleteWrapperCFile() throws Exception {¶		return CommandLineHelper.delete(Paths.get(studentDir, cFile));¶	}¶	¶	public int deleteWrapperObjFile() throws Exception {¶		return CommandLineHelper.delete(Paths.get(studentDir, objFile));¶	}¶	¶	public int deleteBinary() throws Exception {¶		return CommandLineHelper.delete(Paths.get(studentDir, EXEC_NAME));¶	}¶	¶	public int deleteTraces() throws Exception {¶		return CommandLineHelper.delete(Paths.get(studentDir, traceFile));¶	}¶	¶	public int trace() throws Exception {¶		String[] command = {¶				"valgrind",¶				"--trace-children=yes",¶				"./"+EXEC_NAME,¶				">",¶				traceFile¶		};¶		¶		return CommandLineHelper.executeInDocker(command);¶	}¶	¶	public int trace(String testfile) throws Exception {¶		InputStream stream = CompilerHelper.class.getResourceAsStream("/"+testfile);¶		¶		String[] command = {¶				"valgrind",¶				"--trace-children=yes",¶				"./"+EXEC_NAME,¶				">",¶				traceFile¶		};¶		¶		return CommandLineHelper.executeInDocker(command, false, stream);¶	}¶	¶	public int trace(String[] command) throws Exception {¶		String[] fullCommand = new String[command.length + 4];¶		¶		fullCommand[0] = "valgrind";¶		fullCommand[1] = "--trace-children=yes";¶		for(int i=0; i<command.length; i++) {¶			fullCommand[i+2] = command[i];¶		}¶		fullCommand[command.length+2] = ">";¶		fullCommand[command.length+3] = traceFile;¶		¶		return CommandLineHelper.executeInDocker(fullCommand);¶	}¶	¶	public int make() throws Exception {¶		String[] command = {¶				"make",¶				"wrapped"¶		};¶		¶		return CommandLineHelper.executeInDocker(command);¶	}¶	¶	public int makeClean() throws Exception {¶		String[] command = {¶				"make",¶				"clean"¶		};¶		¶		return CommandLineHelper.executeInDocker(command);¶	}¶}¶	¶")]]]></diff>
  </Command>
  <Command __id="336" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 20 09:44:32 EDT 2022" docOffset="0" starttimestamp="1650461184281" timestamp="1088255" />
  <Command __id="338" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 20 09:44:33 EDT 2022" docOffset="0" starttimestamp="1650461184281" timestamp="1089309" />
  <Command __id="339" _type="ShellCommand" date="Wed Apr 20 09:44:42 EDT 2022" starttimestamp="1650461184281" timestamp="1098040" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="337" _type="DiffBasedFileOpenCommand" date="Wed Apr 20 09:44:33 EDT 2022" docASTNodeCount="243" docActiveCodeLength="1481" docExpressionCount="147" docLength="1530" projectName="ValgrindWrappingTool" starttimestamp="1650461184281" timestamp="1089189">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/valgrindpp/helpers/CommandLineHelper.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package valgrindpp.helpers;¶¶import java.io.InputStream;¶import java.nio.file.Path;¶¶public class CommandLineHelper {¶	¶	public static int execute(String[] command) throws Exception {¶		return execute(command, false, null);¶	}¶	¶	public static int execute(String[] command, boolean silent, InputStream input) throws Exception{¶		if(!silent) System.out.println("Executing: " + String.join(" ", command));¶		¶		ProcessBuilder pb = new ProcessBuilder();¶		if(silent) {¶			pb.command(command);¶		} else {¶			pb.command(command).inheritIO();¶		}¶		¶		Process process = pb.start();¶		¶		if(input != null) {¶//			input.transferTo(process.getOutputStream());¶			System.setIn(input);¶			input.close();¶		}¶		¶		return process.waitFor();¶	}¶	¶	public static int executeInDocker(String[] command) throws Exception {¶		return executeInDocker(command, false, null);¶	}¶	¶	public static int executeInDocker(String[] command, boolean silent, InputStream input) throws Exception {¶		String[] dockerCommand = {¶				DockerHelper.DOCKER_PATH,¶				"exec",¶				DockerHelper.CONTAINER_NAME,¶				"sh",¶				"-c",¶				String.join(" ", command)¶		};¶		¶		return execute(dockerCommand, silent, input);¶	}¶	¶	public static int delete(Path filepath) throws Exception {¶		String[] command = {¶				"rm",¶				"-f",¶				filepath.toString()¶		};¶		¶		return execute(command);¶	}¶	¶	public static int deleteInDocker(Path filepath) throws Exception {¶		String[] command = {¶				"rm",¶				"-f",¶				filepath.toString()¶		};¶		¶		return executeInDocker(command);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="340" _type="ShellCommand" date="Wed Apr 20 09:44:44 EDT 2022" starttimestamp="1650461184281" timestamp="1100553" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="343" _type="ShellCommand" date="Wed Apr 20 09:53:10 EDT 2022" starttimestamp="1650461184281" timestamp="1606510" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="341" _type="DiffBasedFileOpenCommand" date="Wed Apr 20 09:52:45 EDT 2022" docASTNodeCount="1281" docActiveCodeLength="6841" docExpressionCount="889" docLength="7188" projectName="ValgrindWrappingTool" starttimestamp="1650461184281" timestamp="1581243">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/valgrindpp/codegen/Function.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package valgrindpp.codegen;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Function {
	String soName, fnName, returnType;
	String[] arguments;
	
	public class InvalidFunctionException extends Exception {
		private static final long serialVersionUID = 1L;

		public InvalidFunctionException(String message) {
			super(message);
		}
	}
	
	public Function(String encoded) throws InvalidFunctionException {
		String[] data = encoded.split(":");
		String[] name = data[0].split(",");
		String[] signature = data[1].split("->");
		
		if(signature[0].trim().equals("void")) {
			this.arguments = new String[0];
		} else {
			this.arguments = signature[0].split(",");
			for(int i=0; i<arguments.length; i++) {
				arguments[i] = arguments[i].trim();
			}
		}
		
		this.returnType = signature[1];
		returnType = returnType.trim();

		if(name.length == 1) {
			this.soName = "NONE";
			this.fnName = name[0];
		} else if(name.length == 2) {
			this.soName = name[0];
			this.fnName = name[1];
		} else {
			throw new InvalidFunctionException("Invalid Name");
		}
		
		soName = soName.trim();
		fnName = fnName.trim();
	}
	
	public String toCString() throws InvalidFunctionException {
		StringBuilder sb = new StringBuilder();
		
		sb.append(returnType);
		sb.append(" ");
		sb.append("I_WRAP_SONAME_FNNAME_ZZ(");
		sb.append(zEncodeName(soName));
		sb.append(", ");
		sb.append(zEncodeName(fnName));
		sb.append(")\n");
		
		sb.append("(");
		for(int i=0; i<arguments.length; i++) {
			sb.append(arguments[i]);
			if(i<arguments.length-1) {
				sb.append(", ");
			}
		}
		sb.append(")\n");
		
		sb.append("{");
		
		sb.append("\n\t");
		
		sb.append("OrigFn fn;");
		sb.append("\n\t");

		sb.append("VALGRIND_GET_ORIG_FN(fn);");
		sb.append("\n\t");

		
		if(!isVoid()) {
			sb.append(returnType);
			sb.append(" result;");
			sb.append("\n\t");

		}
		
		sb.append("CALL_FN_");
		
		if(isVoid()) {
			sb.append("v_");
		} else {
			sb.append("W_");
		}
		
		switch(arguments.length) {
		case 0: 
			sb.append("v"); break;
		case 1: case 2: case 3: case 4: 
			for(int i=0; i<arguments.length; i++) sb.append("W");
			break;
		case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12:
			sb.append(arguments.length);
			sb.append("W");
			break;
		default: 
			throw new InvalidFunctionException("Function contains more than 12 arguments");
		}
		
		sb.append("(");
		
		if(!isVoid()) {
			sb.append("result, ");
		}
		
		sb.append("fn");
		
		for(int i=0; i<arguments.length; i++) {
			if(i == 0) {
				sb.append(", ");
			}
			
			sb.append(parseArgName(arguments[i]));
			
			if(i < arguments.length-1) {
				sb.append(", ");
			}
		}
		
		sb.append(");");
		sb.append("\n\t");

		
		sb.append("trace(\""+fnName+": ");
		
		if(arguments.length == 0) sb.append("void");
		
		for(int i=0; i<arguments.length; i++) {			
			sb.append("%");
			sb.append(argStringFormatter(arguments[i]));
			
			if(i < arguments.length-1) {
				sb.append(", ");
			}
		}
		

		sb.append(" -> ");
		
		if(!isVoid()) {
			sb.append("%");
			sb.append(argStringFormatter(returnType));
		} else {
			sb.append("void");
		}
		
		sb.append("\"");		
		for(int i=0; i<arguments.length; i++) {
			if(i == 0) {
				sb.append(",");
			}
			
			if(argType(arguments[i]) == StringType.OTHER) {
				sb.append("&");
			}
			
			sb.append(parseArgName(arguments[i]));
			
			if(i < arguments.length-1) {
				sb.append(", ");
			}
		}
		
		if(!isVoid()) {
			sb.append(", ");
			
			if(argType(returnType) == StringType.OTHER) {
				sb.append("&");
			}
			
			sb.append("result");
		}
		sb.append(");");
		sb.append("\n");

		
		if(!isVoid()) {
			sb.append("\t");
			sb.append("return result;");
			sb.append("\n");
		}
		
		sb.append("}");
		
		return sb.toString();
	}
	
	private enum StringType {
		INT, UNSIGNED_INT, SIZE_T,
		LONG, UNSIGNED_LONG, LONG_LONG, UNSIGNED_LONG_LONG,
		SHORT,UNSIGNED_SHORT,
		FLOAT, DOUBLE, LONG_DOUBLE,
		CHAR, POINTER, ARRAY, OTHER
	}
	
	private StringType argType(String arg) {
		if(arg.contains("*")) return StringType.POINTER;
		if(arg.contains("[]")) return StringType.ARRAY;
		
		if(arg.contains("long double")) return StringType.LONG_DOUBLE;
		if(arg.contains("double")) return StringType.DOUBLE;
		if(arg.contains("float")) return StringType.FLOAT;
		
		if(arg.contains("unsigned long long")) return StringType.UNSIGNED_LONG_LONG;
		if(arg.contains("unsigned long")) return StringType.UNSIGNED_LONG;
		if(arg.contains("long long")) return StringType.LONG_LONG;
		if(arg.contains("long")) return StringType.LONG;
		
		if(arg.contains("unsigned short")) return StringType.UNSIGNED_SHORT;
		if(arg.contains("short")) return StringType.SHORT;
		
		if(arg.contains("unsigned int")) return StringType.UNSIGNED_INT;
		if(arg.contains("int")) return StringType.INT;
		
		if(arg.contains("char")) return StringType.CHAR;
		
		if(arg.contains("size_t")) return StringType.SIZE_T;
			
		return StringType.OTHER;
	}
	
	private String argStringFormatter(String arg) {
		switch(argType(arg)) {
		case POINTER: return "p";
		case ARRAY: return "p";
		
		case LONG_DOUBLE: return "Lg";
		case DOUBLE: case FLOAT: return "g";
		
		case UNSIGNED_LONG_LONG: return "llu";
		case UNSIGNED_LONG: return "lu";
		case LONG_LONG: return "lli";
		case LONG: return "li";
		
		case UNSIGNED_SHORT: return "hu";
		case SHORT: return "hi";
		
		case UNSIGNED_INT: return "u";
		case INT: return "i";
		
		case CHAR: return "c";
		
		case SIZE_T: return "zu";	
		
		case OTHER: default: return "p";
		}
	}
	
	private String parseArgName(String arg) throws InvalidFunctionException {
		// funarg
		if(arg.charAt(arg.length()-1) == ')') {
			Pattern pattern = Pattern.compile(".+\\(\\*(.+)\\)\\(.+\\)");
			Matcher m = pattern.matcher(arg);
			if(m.matches()) {
				return m.group(1);
			} else {
				throw new InvalidFunctionException("Invalid argument syntax: "+arg);
			}
		} else {
			String[] comps = arg.split(" |\\*");
			return comps[comps.length-1];
		}
	}
	
	private String zEncodeName(String name) throws InvalidFunctionException {
		/*
			 Za   encodes    *
			 Zp              +
			 Zc              :
			 Zd              .
			 Zu              _
			 Zh              -
			 Zs              (space)
			 ZA              @
			 ZZ              Z
			 ZL              (       # only in valgrind 3.3.0 and later
			 ZR              )       # only in valgrind 3.3.0 and later
		 */
		
		StringBuilder sb = new StringBuilder();
		for(char c: name.toCharArray()) {
			switch(c) {
			case('*'): sb.append("Za"); break;
			case('+'): sb.append("Zp"); break;
			case(':'): sb.append("Zc"); break;
			case('.'): sb.append("Zd"); break;
			case('_'): sb.append("Zu"); break;
			case('-'): sb.append("Zh"); break;
			case(' '): sb.append("Zs"); break;
			case('@'): sb.append("ZA"); break;
			case('Z'): sb.append("ZZ"); break;
			case('('): sb.append("ZL"); break;
			case(')'): sb.append("ZR"); break;
			default: 
				if(Character.isLetterOrDigit(c)) {
					sb.append(c);
				} else {
					throw new InvalidFunctionException("Invalid character in function name");
				}
			}
		}
		
		return sb.toString();
	}
	
	private boolean isVoid() {
		return returnType.equals("void");
	}
}
]]></snapshot>
  </Command>
  <Command __id="344" _type="ShellCommand" date="Wed Apr 20 09:53:47 EDT 2022" starttimestamp="1650461184281" timestamp="1643660" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="346" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 20 09:53:51 EDT 2022" docOffset="0" starttimestamp="1650461184281" timestamp="1646878" />
</Events>
