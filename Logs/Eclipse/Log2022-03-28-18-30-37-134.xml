<Events startTimestamp="1648506637134" logVersion="1.0.0.202101171653">
  <Command __id="0" _type="DiffBasedFileOpenCommand" date="Mon Mar 28 18:30:43 EDT 2022" projectName="null" starttimestamp="1648506637134" timestamp="6751">
    <filePath><![CDATA[null]]></filePath>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="2" _type="ShellCommand" date="Mon Mar 28 18:31:17 EDT 2022" starttimestamp="1648506637134" timestamp="40586" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4" _type="SelectTextCommand" caretOffset="107" date="Mon Mar 28 18:31:21 EDT 2022" end="107" start="102" starttimestamp="1648506637134" timestamp="44773" />
  <Command __id="5" _type="ShellCommand" date="Mon Mar 28 18:31:24 EDT 2022" starttimestamp="1648506637134" timestamp="47159" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6" _type="ShellCommand" date="Mon Mar 28 18:42:57 EDT 2022" starttimestamp="1648506637134" timestamp="740626" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7" _type="ShellCommand" date="Mon Mar 28 18:42:59 EDT 2022" starttimestamp="1648506637134" timestamp="742748" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8" _type="ShellCommand" date="Mon Mar 28 18:43:49 EDT 2022" starttimestamp="1648506637134" timestamp="792550" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9" _type="ShellCommand" date="Mon Mar 28 18:43:50 EDT 2022" starttimestamp="1648506637134" timestamp="793729" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="10" _type="ShellCommand" date="Mon Mar 28 18:44:36 EDT 2022" starttimestamp="1648506637134" timestamp="839526" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="11" _type="MoveCaretCommand" caretOffset="538" date="Mon Mar 28 18:44:36 EDT 2022" docOffset="659" starttimestamp="1648506637134" timestamp="839725" />
  <Command __id="12" _type="ShellCommand" date="Mon Mar 28 18:45:05 EDT 2022" starttimestamp="1648506637134" timestamp="868525" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="13" _type="ShellCommand" date="Mon Mar 28 18:45:06 EDT 2022" starttimestamp="1648506637134" timestamp="868938" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14" _type="ShellCommand" date="Mon Mar 28 18:45:06 EDT 2022" starttimestamp="1648506637134" timestamp="869030" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3" _type="DiffBasedFileOpenCommand" date="Mon Mar 28 18:31:21 EDT 2022" docASTNodeCount="154" docActiveCodeLength="757" docExpressionCount="89" docLength="757" projectName="ValgrindWrappingTool" starttimestamp="1648506637134" timestamp="44437">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/grader/AbstractGrader.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package grader;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import grader.Trace.TraceParsingException;

public abstract class AbstractGrader implements Grader {
	List<Trace> traces;
	List<String> stdout;
	
	public AbstractGrader(String studentDir, String filename) throws Exception {
		traces = new ArrayList<Trace>();
		stdout = new ArrayList<String>();
		
		File file = new File(studentDir + "/" + filename);
		Scanner scanner = new Scanner(file);
		
		while(scanner.hasNextLine()) {
			String line = scanner.nextLine();
			try {
				traces.add(new Trace(line));
			} catch (TraceParsingException e) {
				stdout.add(line);
			}
		}
		
		scanner.close();
	}
	
	public abstract List<Test> grade();
}
]]></snapshot>
  </Command>
  <Command __id="20" _type="EclipseCommand" commandID="" date="Mon Mar 28 18:46:04 EDT 2022" starttimestamp="1648506637134" timestamp="927659" />
  <Command __id="21" _type="EclipseCommand" commandID="" date="Mon Mar 28 18:46:05 EDT 2022" starttimestamp="1648506637134" timestamp="928188" />
  <Command __id="22" _type="ShellCommand" date="Mon Mar 28 18:46:26 EDT 2022" starttimestamp="1648506637134" timestamp="949256" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="23" _type="ShellCommand" date="Mon Mar 28 18:46:33 EDT 2022" starttimestamp="1648506637134" timestamp="956801" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="24" _type="ShellCommand" date="Mon Mar 28 18:46:42 EDT 2022" starttimestamp="1648506637134" timestamp="965679" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="25" _type="ShellCommand" date="Mon Mar 28 18:46:45 EDT 2022" starttimestamp="1648506637134" timestamp="968592" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="26" _type="ShellCommand" date="Mon Mar 28 18:47:00 EDT 2022" starttimestamp="1648506637134" timestamp="982907" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="27" _type="ShellCommand" date="Mon Mar 28 18:47:01 EDT 2022" starttimestamp="1648506637134" timestamp="984415" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="28" _type="ShellCommand" date="Mon Mar 28 18:47:01 EDT 2022" starttimestamp="1648506637134" timestamp="984487" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="29" _type="ShellCommand" date="Mon Mar 28 18:48:14 EDT 2022" starttimestamp="1648506637134" timestamp="1056985" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="30" _type="ShellCommand" date="Mon Mar 28 18:48:14 EDT 2022" starttimestamp="1648506637134" timestamp="1057130" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="31" _type="EclipseCommand" commandID="" date="Mon Mar 28 18:48:14 EDT 2022" starttimestamp="1648506637134" timestamp="1057405" />
  <Command __id="32" _type="EclipseCommand" commandID="" date="Mon Mar 28 18:48:14 EDT 2022" starttimestamp="1648506637134" timestamp="1057423" />
  <Command __id="19" _type="DiffBasedFileOpenCommand" date="Mon Mar 28 18:45:31 EDT 2022" docASTNodeCount="1" docActiveCodeLength="468" docExpressionCount="0" docLength="468" projectName="ValgrindWrappingTool" starttimestamp="1648506637134" timestamp="894224">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/TraceConfig]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[#include <stdio.h>
#include <pthread.h>
#include <unistd.h>


libpthread.so.0,pthread_create:pthread_t *restrict thread, const pthread_attr_t *restrict attr,void *(*start_routine)(void *),void *restrict arg->int
libpthread*,pthread_join:pthread_t thread, void **retval->int

*, pthread_mutex_init: pthread_mutex_t *mutex, const pthread_mutexattr_t *attr -> int
*, pthread_mutex_lock: pthread_mutex_t *mutex -> int
*, pthread_mutex_unlock: pthread_mutex_t *mutex -> int]]></snapshot>
  </Command>
  <Command __id="33" _type="ShellCommand" date="Mon Mar 28 18:48:17 EDT 2022" starttimestamp="1648506637134" timestamp="1060811" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="35" _type="MoveCaretCommand" caretOffset="591" date="Mon Mar 28 18:48:19 EDT 2022" docOffset="712" starttimestamp="1648506637134" timestamp="1062825" />
  <Command __id="36" _type="ShellCommand" date="Mon Mar 28 18:48:21 EDT 2022" starttimestamp="1648506637134" timestamp="1064122" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="34" _type="DiffBasedFileOpenCommand" date="Mon Mar 28 18:48:19 EDT 2022" docASTNodeCount="154" docActiveCodeLength="757" docExpressionCount="89" docLength="757" projectName="ValgrindWrappingTool" starttimestamp="1648506637134" timestamp="1062545">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/grader/AbstractGrader.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package grader;¶¶import java.io.File;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.Scanner;¶¶import grader.Trace.TraceParsingException;¶¶public abstract class AbstractGrader implements Grader {¶	List<Trace> traces;¶	List<String> stdout;¶	¶	public AbstractGrader(String studentDir, String filename) throws Exception {¶		traces = new ArrayList<Trace>();¶		stdout = new ArrayList<String>();¶		¶		File file = new File(studentDir + "/" + filename);¶		Scanner scanner = new Scanner(file);¶		¶		while(scanner.hasNextLine()) {¶			String line = scanner.nextLine();¶			try {¶				traces.add(new Trace(line));¶			} catch (TraceParsingException e) {¶				stdout.add(line);¶			}¶		}¶		¶		scanner.close();¶	}¶	¶	public abstract List<Test> grade();¶}¶")]]]></diff>
  </Command>
  <Command __id="37" _type="ShellCommand" date="Mon Mar 28 18:54:02 EDT 2022" starttimestamp="1648506637134" timestamp="1405650" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="38" _type="DiffBasedFileOpenCommand" date="Mon Mar 28 18:54:09 EDT 2022" docASTNodeCount="139" docActiveCodeLength="783" docExpressionCount="85" docLength="783" projectName="ValgrindWrappingTool" starttimestamp="1648506637134" timestamp="1412517">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/grader/SimpleGrader.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package grader;

import java.util.ArrayList;
import java.util.List;

public class SimpleGrader extends AbstractGrader {

	public SimpleGrader(String studentDir, String filename) throws Exception {
		super(studentDir, filename);
	}

	public List<Test> grade() {
		List<Test> tests = new ArrayList<Test>();
		
		tests.add(countFuncCall("pthread_create", 2));
		tests.add(countFuncCall("pthread_join", 2));
		tests.add(countFuncCall("pthread_mutex_lock", 20));
		tests.add(countFuncCall("pthread_mutex_unlock", 20));
		
		return tests;
	}
	
	private Test countFuncCall(String fnname, int requiredCount) {
		int count = 0; 
		
		for(Trace trace: traces) {
			if(trace.fnname.equals(fnname)) {
				count ++;
			}
		}
		
		return new Test("Called " + fnname, count >= requiredCount);
	}
}
]]></snapshot>
  </Command>
  <Command __id="39" _type="SelectTextCommand" caretOffset="153" date="Mon Mar 28 18:54:10 EDT 2022" end="153" start="145" starttimestamp="1648506637134" timestamp="1412978" />
  <Command __id="41" _type="MoveCaretCommand" caretOffset="0" date="Mon Mar 28 18:54:28 EDT 2022" docOffset="0" starttimestamp="1648506637134" timestamp="1431702" />
  <Command __id="42" _type="ShellCommand" date="Mon Mar 28 18:54:39 EDT 2022" starttimestamp="1648506637134" timestamp="1442732" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="43" _type="ShellCommand" date="Mon Mar 28 18:55:52 EDT 2022" starttimestamp="1648506637134" timestamp="1515239" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="44" _type="ShellCommand" date="Mon Mar 28 18:56:08 EDT 2022" starttimestamp="1648506637134" timestamp="1531852" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="40" _type="DiffBasedFileOpenCommand" date="Mon Mar 28 18:54:28 EDT 2022" docASTNodeCount="170" docActiveCodeLength="873" docExpressionCount="111" docLength="873" projectName="ValgrindWrappingTool" starttimestamp="1648506637134" timestamp="1431377">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/grader/Trace.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package grader;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Trace {
	long timestamp, thread;
	String fnname, result;
	String[] arguments;
	
	public class TraceParsingException extends Exception {
		public TraceParsingException(String trace) {
			super(trace);
		}

		private static final long serialVersionUID = 1;
	}
	
	public Trace(String trace) throws Exception {
		Pattern pattern = Pattern.compile("([0-9]+) - Thread: ([0-9]+) - (.*): (.*) -> (.*)");
		Matcher m = pattern.matcher(trace);
		
		if(m.matches()) {
			timestamp = Long.parseLong(m.group(1));
			thread = Long.parseLong(m.group(2));
			fnname = m.group(3);
			arguments = m.group(4).split(",");
			result = m.group(5);

			for(int i=0; i<arguments.length; i++) {
				arguments[i] = arguments[i].trim();
			}
		} else {
			throw new TraceParsingException(trace);
		}
	}
}
]]></snapshot>
  </Command>
  <Command __id="45" _type="ShellCommand" date="Mon Mar 28 18:56:20 EDT 2022" starttimestamp="1648506637134" timestamp="1543134" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="46" _type="DiffBasedFileOpenCommand" date="Mon Mar 28 18:56:22 EDT 2022" docASTNodeCount="139" docActiveCodeLength="783" docExpressionCount="85" docLength="783" projectName="ValgrindWrappingTool" starttimestamp="1648506637134" timestamp="1545697">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/grader/SimpleGrader.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package grader;¶¶import java.util.ArrayList;¶import java.util.List;¶¶public class SimpleGrader extends AbstractGrader {¶¶	public SimpleGrader(String studentDir, String filename) throws Exception {¶		super(studentDir, filename);¶	}¶¶	public List<Test> grade() {¶		List<Test> tests = new ArrayList<Test>();¶		¶		tests.add(countFuncCall("pthread_create", 2));¶		tests.add(countFuncCall("pthread_join", 2));¶		tests.add(countFuncCall("pthread_mutex_lock", 20));¶		tests.add(countFuncCall("pthread_mutex_unlock", 20));¶		¶		return tests;¶	}¶	¶	private Test countFuncCall(String fnname, int requiredCount) {¶		int count = 0; ¶		¶		for(Trace trace: traces) {¶			if(trace.fnname.equals(fnname)) {¶				count ++;¶			}¶		}¶		¶		return new Test("Called " + fnname, count >= requiredCount);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="47" _type="SelectTextCommand" caretOffset="153" date="Mon Mar 28 18:56:23 EDT 2022" end="153" start="145" starttimestamp="1648506637134" timestamp="1545877" />
  <Command __id="48" _type="DiffBasedFileOpenCommand" date="Mon Mar 28 18:56:23 EDT 2022" docASTNodeCount="154" docActiveCodeLength="757" docExpressionCount="89" docLength="757" projectName="ValgrindWrappingTool" starttimestamp="1648506637134" timestamp="1546364">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/grader/AbstractGrader.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package grader;¶¶import java.io.File;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.Scanner;¶¶import grader.Trace.TraceParsingException;¶¶public abstract class AbstractGrader implements Grader {¶	List<Trace> traces;¶	List<String> stdout;¶	¶	public AbstractGrader(String studentDir, String filename) throws Exception {¶		traces = new ArrayList<Trace>();¶		stdout = new ArrayList<String>();¶		¶		File file = new File(studentDir + "/" + filename);¶		Scanner scanner = new Scanner(file);¶		¶		while(scanner.hasNextLine()) {¶			String line = scanner.nextLine();¶			try {¶				traces.add(new Trace(line));¶			} catch (TraceParsingException e) {¶				stdout.add(line);¶			}¶		}¶		¶		scanner.close();¶	}¶	¶	public abstract List<Test> grade();¶}¶")]]]></diff>
  </Command>
  <Command __id="49" _type="MoveCaretCommand" caretOffset="591" date="Mon Mar 28 18:56:23 EDT 2022" docOffset="712" starttimestamp="1648506637134" timestamp="1546485" />
  <Command __id="51" _type="SelectTextCommand" caretOffset="153" date="Mon Mar 28 18:56:24 EDT 2022" end="153" start="145" starttimestamp="1648506637134" timestamp="1547742" />
  <Command __id="52" _type="ShellCommand" date="Mon Mar 28 18:56:48 EDT 2022" starttimestamp="1648506637134" timestamp="1571834" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="50" _type="DiffBasedFileOpenCommand" date="Mon Mar 28 18:56:24 EDT 2022" docASTNodeCount="139" docActiveCodeLength="783" docExpressionCount="85" docLength="783" projectName="ValgrindWrappingTool" starttimestamp="1648506637134" timestamp="1547639">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/grader/SimpleGrader.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package grader;¶¶import java.util.ArrayList;¶import java.util.List;¶¶public class SimpleGrader extends AbstractGrader {¶¶	public SimpleGrader(String studentDir, String filename) throws Exception {¶		super(studentDir, filename);¶	}¶¶	public List<Test> grade() {¶		List<Test> tests = new ArrayList<Test>();¶		¶		tests.add(countFuncCall("pthread_create", 2));¶		tests.add(countFuncCall("pthread_join", 2));¶		tests.add(countFuncCall("pthread_mutex_lock", 20));¶		tests.add(countFuncCall("pthread_mutex_unlock", 20));¶		¶		return tests;¶	}¶	¶	private Test countFuncCall(String fnname, int requiredCount) {¶		int count = 0; ¶		¶		for(Trace trace: traces) {¶			if(trace.fnname.equals(fnname)) {¶				count ++;¶			}¶		}¶		¶		return new Test("Called " + fnname, count >= requiredCount);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="53" _type="ShellCommand" date="Mon Mar 28 18:57:12 EDT 2022" starttimestamp="1648506637134" timestamp="1595733" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="54" _type="DiffBasedFileOpenCommand" date="Mon Mar 28 18:57:14 EDT 2022" docASTNodeCount="170" docActiveCodeLength="873" docExpressionCount="111" docLength="873" projectName="ValgrindWrappingTool" starttimestamp="1648506637134" timestamp="1596882">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/grader/Trace.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package grader;¶¶import java.util.regex.Matcher;¶import java.util.regex.Pattern;¶¶public class Trace {¶	long timestamp, thread;¶	String fnname, result;¶	String[] arguments;¶	¶	public class TraceParsingException extends Exception {¶		public TraceParsingException(String trace) {¶			super(trace);¶		}¶¶		private static final long serialVersionUID = 1;¶	}¶	¶	public Trace(String trace) throws Exception {¶		Pattern pattern = Pattern.compile("([0-9]+) - Thread: ([0-9]+) - (.*): (.*) -> (.*)");¶		Matcher m = pattern.matcher(trace);¶		¶		if(m.matches()) {¶			timestamp = Long.parseLong(m.group(1));¶			thread = Long.parseLong(m.group(2));¶			fnname = m.group(3);¶			arguments = m.group(4).split(",");¶			result = m.group(5);¶¶			for(int i=0; i<arguments.length; i++) {¶				arguments[i] = arguments[i].trim();¶			}¶		} else {¶			throw new TraceParsingException(trace);¶		}¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="55" _type="MoveCaretCommand" caretOffset="0" date="Mon Mar 28 18:57:14 EDT 2022" docOffset="0" starttimestamp="1648506637134" timestamp="1597086" />
  <Command __id="57" _type="MoveCaretCommand" caretOffset="0" date="Mon Mar 28 18:57:16 EDT 2022" docOffset="0" starttimestamp="1648506637134" timestamp="1599277" />
  <Command __id="58" _type="ShellCommand" date="Mon Mar 28 18:57:25 EDT 2022" starttimestamp="1648506637134" timestamp="1607925" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="63" _type="RunCommand" date="Mon Mar 28 18:58:38 EDT 2022" kind="HitBreakPoint" projectName="ValgrindWrappingTool" starttimestamp="1648506637134" timestamp="1681331" type="Run" />
  <Command __id="64" _type="RunCommand" date="Mon Mar 28 18:58:38 EDT 2022" kind="HitBreakPoint" projectName="ValgrindWrappingTool" starttimestamp="1648506637134" timestamp="1681332" type="Run" />
  <Command __id="65" _type="ShellCommand" date="Mon Mar 28 19:10:00 EDT 2022" starttimestamp="1648506637134" timestamp="2363692" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="66" _type="ShellCommand" date="Mon Mar 28 19:10:02 EDT 2022" starttimestamp="1648506637134" timestamp="2365262" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="56" _type="DiffBasedFileOpenCommand" date="Mon Mar 28 18:57:16 EDT 2022" docASTNodeCount="93" docActiveCodeLength="432" docExpressionCount="59" docLength="432" projectName="ValgrindWrappingTool" starttimestamp="1648506637134" timestamp="1598995">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/grader/Test.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package grader;

import java.awt.Color;
import java.awt.Component;

import javax.swing.JLabel;

public class Test {
	public String name;
	public boolean passed;
	
	public Test(String name, boolean passed) {
		this.name = name;
		this.passed = passed;
	}
	
	public Component view() {
		JLabel view = new JLabel((passed ? "PASSED - " : "FAILED - ") + name);
		view.setForeground(passed ? Color.GREEN : Color.RED);
		return view;
	}
}
]]></snapshot>
  </Command>
  <Command __id="67" _type="ShellCommand" date="Mon Mar 28 19:37:07 EDT 2022" starttimestamp="1648506637134" timestamp="3990143" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="68" _type="DiffBasedFileOpenCommand" date="Mon Mar 28 19:37:13 EDT 2022" docASTNodeCount="1221" docActiveCodeLength="6552" docExpressionCount="845" docLength="6899" projectName="ValgrindWrappingTool" starttimestamp="1648506637134" timestamp="3996641">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/parser/Function.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package parser;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Function {
	String soName, fnName, returnType;
	String[] arguments;
	
	public class InvalidFunctionException extends Exception {
		private static final long serialVersionUID = 1L;

		public InvalidFunctionException(String message) {
			super(message);
		}
	}
	
	public Function(String encoded) throws InvalidFunctionException {
		String[] data = encoded.split(":");
		String[] name = data[0].split(",");
		String[] signature = data[1].split("->");
		
		this.arguments = signature[0].split(",");
		this.returnType = signature[1];
		
		if(name.length == 1) {
			this.soName = "NONE";
			this.fnName = name[0];
		} else if(name.length == 2) {
			this.soName = name[0];
			this.fnName = name[1];
		} else {
			throw new InvalidFunctionException("Invalid Name");
		}
		
		soName = soName.trim();
		fnName = fnName.trim();
		returnType = returnType.trim();
		
		for(int i=0; i<arguments.length; i++) {
			arguments[i] = arguments[i].trim();
		}
	}
	
	public String toCString() throws InvalidFunctionException {
		StringBuilder sb = new StringBuilder();
		
		sb.append(returnType);
		sb.append(" ");
		sb.append("I_WRAP_SONAME_FNNAME_ZZ(");
		sb.append(zEncodeName(soName));
		sb.append(", ");
		sb.append(zEncodeName(fnName));
		sb.append(")\n");
		
		sb.append("(");
		for(int i=0; i<arguments.length; i++) {
			sb.append(arguments[i]);
			if(i<arguments.length-1) {
				sb.append(", ");
			}
		}
		sb.append(")\n");
		
		sb.append("{");
		
		sb.append("\n\t");
		
		sb.append("OrigFn fn;");
		sb.append("\n\t");

		sb.append("VALGRIND_GET_ORIG_FN(fn);");
		sb.append("\n\t");

		
		if(!isVoid()) {
			sb.append(returnType);
			sb.append(" result;");
			sb.append("\n\t");

		}
		
		sb.append("CALL_FN_");
		
		if(isVoid()) {
			sb.append("v_");
		} else {
			sb.append("W_");
		}
		
		switch(arguments.length) {
		case 0: 
			sb.append("v"); break;
		case 1: case 2: case 3: case 4: 
			for(int i=0; i<arguments.length; i++) sb.append("W");
			break;
		case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12:
			sb.append(arguments.length);
			sb.append("W");
			break;
		default: 
			throw new InvalidFunctionException("Function contains more than 12 arguments");
		}
		
		sb.append("(");
		
		if(!isVoid()) {
			sb.append("result, ");
		}
		
		sb.append("fn, ");
		
		for(int i=0; i<arguments.length; i++) {
			sb.append(parseArgName(arguments[i]));
			
			if(i < arguments.length-1) {
				sb.append(", ");
			}
		}
		
		sb.append(");");
		sb.append("\n\t");

		
		sb.append("trace(\""+fnName+": ");
		for(int i=0; i<arguments.length; i++) {
			sb.append("%");
			sb.append(argStringFormatter(arguments[i]));
			
			if(i < arguments.length-1) {
				sb.append(", ");
			}
		}
		
		if(!isVoid()) {
			sb.append(" -> ");
			sb.append("%");
			sb.append(argStringFormatter(returnType));
		}
		
		sb.append("\",");
		for(int i=0; i<arguments.length; i++) {
			if(argType(arguments[i]) == StringType.OTHER) {
				sb.append("&");
			}
			
			sb.append(parseArgName(arguments[i]));
			
			if(i < arguments.length-1) {
				sb.append(", ");
			}
		}
		
		if(!isVoid()) {
			sb.append(", ");
			
			if(argType(returnType) == StringType.OTHER) {
				sb.append("&");
			}
			
			sb.append("result");
		}
		sb.append(");");
		sb.append("\n");

		
		if(!isVoid()) {
			sb.append("\t");
			sb.append("return result;");
			sb.append("\n");
		}
		
		sb.append("}");
		
		return sb.toString();
	}
	
	private enum StringType {
		INT, UNSIGNED_INT, SIZE_T,
		LONG, UNSIGNED_LONG, LONG_LONG, UNSIGNED_LONG_LONG,
		SHORT,UNSIGNED_SHORT,
		FLOAT, DOUBLE, LONG_DOUBLE,
		CHAR, POINTER, ARRAY, OTHER
	}
	
	private StringType argType(String arg) {
		if(arg.contains("*")) return StringType.POINTER;
		if(arg.contains("[]")) return StringType.ARRAY;
		
		if(arg.contains("long double")) return StringType.LONG_DOUBLE;
		if(arg.contains("double")) return StringType.DOUBLE;
		if(arg.contains("float")) return StringType.FLOAT;
		
		if(arg.contains("unsigned long long")) return StringType.UNSIGNED_LONG_LONG;
		if(arg.contains("unsigned long")) return StringType.UNSIGNED_LONG;
		if(arg.contains("long long")) return StringType.LONG_LONG;
		if(arg.contains("long")) return StringType.LONG;
		
		if(arg.contains("unsigned short")) return StringType.UNSIGNED_SHORT;
		if(arg.contains("short")) return StringType.SHORT;
		
		if(arg.contains("unsigned int")) return StringType.UNSIGNED_INT;
		if(arg.contains("int")) return StringType.INT;
		
		if(arg.contains("char")) return StringType.CHAR;
		
		if(arg.contains("size_t")) return StringType.SIZE_T;
			
		return StringType.OTHER;
	}
	
	private String argStringFormatter(String arg) {
		switch(argType(arg)) {
		case POINTER: return "p";
		case ARRAY: return "p";
		
		case LONG_DOUBLE: return "Lg";
		case DOUBLE: case FLOAT: return "g";
		
		case UNSIGNED_LONG_LONG: return "llu";
		case UNSIGNED_LONG: return "lu";
		case LONG_LONG: return "lli";
		case LONG: return "li";
		
		case UNSIGNED_SHORT: return "hu";
		case SHORT: return "hi";
		
		case UNSIGNED_INT: return "u";
		case INT: return "i";
		
		case CHAR: return "c";
		
		case SIZE_T: return "zu";	
		
		case OTHER: default: return "p";
		}
	}
	
	private String parseArgName(String arg) throws InvalidFunctionException {
		// funarg
		if(arg.charAt(arg.length()-1) == ')') {
			Pattern pattern = Pattern.compile(".+\\(\\*(.+)\\)\\(.+\\)");
			Matcher m = pattern.matcher(arg);
			if(m.matches()) {
				return m.group(1);
			} else {
				throw new InvalidFunctionException("Invalid argument syntax: "+arg);
			}
		} else {
			String[] comps = arg.split(" |\\*");
			return comps[comps.length-1];
		}
	}
	
	private String zEncodeName(String name) throws InvalidFunctionException {
		/*
			 Za   encodes    *
			 Zp              +
			 Zc              :
			 Zd              .
			 Zu              _
			 Zh              -
			 Zs              (space)
			 ZA              @
			 ZZ              Z
			 ZL              (       # only in valgrind 3.3.0 and later
			 ZR              )       # only in valgrind 3.3.0 and later
		 */
		
		StringBuilder sb = new StringBuilder();
		for(char c: name.toCharArray()) {
			switch(c) {
			case('*'): sb.append("Za"); break;
			case('+'): sb.append("Zp"); break;
			case(':'): sb.append("Zc"); break;
			case('.'): sb.append("Zd"); break;
			case('_'): sb.append("Zu"); break;
			case('-'): sb.append("Zh"); break;
			case(' '): sb.append("Zs"); break;
			case('@'): sb.append("ZA"); break;
			case('Z'): sb.append("ZZ"); break;
			case('('): sb.append("ZL"); break;
			case(')'): sb.append("ZR"); break;
			default: 
				if(Character.isLetterOrDigit(c)) {
					sb.append(c);
				} else {
					throw new InvalidFunctionException("Invalid character in function name");
				}
			}
		}
		
		return sb.toString();
	}
	
	private boolean isVoid() {
		return returnType.equals("void");
	}
}
]]></snapshot>
  </Command>
  <Command __id="69" _type="MoveCaretCommand" caretOffset="0" date="Mon Mar 28 19:37:14 EDT 2022" docOffset="0" starttimestamp="1648506637134" timestamp="3996999" />
  <Command __id="70" _type="DiffBasedFileOpenCommand" date="Mon Mar 28 19:37:17 EDT 2022" docASTNodeCount="128" docActiveCodeLength="700" docExpressionCount="81" docLength="700" projectName="ValgrindWrappingTool" starttimestamp="1648506637134" timestamp="4000734">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/parser/Parser.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package parser;

import java.io.InputStream;
import java.util.Scanner;

public class Parser {
	private String filename;
	
	public Parser(String filename) {
		this.filename = filename;
	}
	
	public Wrapper parse() throws Exception {
		InputStream stream = Parser.class.getResourceAsStream("/"+filename);
		Scanner scanner = new Scanner(stream);
		
		Wrapper wrapper = new Wrapper();
		
		while(scanner.hasNextLine()) {
			String line = scanner.nextLine();
			if(line.startsWith("//") || line.isBlank()) continue;
			
			if(line.startsWith("#include")) {
				wrapper.imports.add(line);
			} else {
				wrapper.functions.add(new Function(line));
			}
		}
		
		scanner.close();
		
		return wrapper;
	}
}
]]></snapshot>
  </Command>
  <Command __id="71" _type="MoveCaretCommand" caretOffset="0" date="Mon Mar 28 19:37:18 EDT 2022" docOffset="0" starttimestamp="1648506637134" timestamp="4001132" />
  <Command __id="73" _type="SelectTextCommand" caretOffset="340" date="Mon Mar 28 19:37:23 EDT 2022" end="340" start="332" starttimestamp="1648506637134" timestamp="4006729" />
  <Command __id="74" _type="ShellCommand" date="Mon Mar 28 19:38:00 EDT 2022" starttimestamp="1648506637134" timestamp="4043636" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="75" _type="ShellCommand" date="Mon Mar 28 19:38:00 EDT 2022" starttimestamp="1648506637134" timestamp="4043648" type="ECLIPSE_MINIMIZED" />
  <Command __id="72" _type="DiffBasedFileOpenCommand" date="Mon Mar 28 19:37:23 EDT 2022" docASTNodeCount="1221" docActiveCodeLength="6552" docExpressionCount="845" docLength="6899" projectName="ValgrindWrappingTool" starttimestamp="1648506637134" timestamp="4006614">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/parser/Function.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package parser;¶¶import java.util.regex.Matcher;¶import java.util.regex.Pattern;¶¶public class Function {¶	String soName, fnName, returnType;¶	String[] arguments;¶	¶	public class InvalidFunctionException extends Exception {¶		private static final long serialVersionUID = 1L;¶¶		public InvalidFunctionException(String message) {¶			super(message);¶		}¶	}¶	¶	public Function(String encoded) throws InvalidFunctionException {¶		String[] data = encoded.split(":");¶		String[] name = data[0].split(",");¶		String[] signature = data[1].split("->");¶		¶		this.arguments = signature[0].split(",");¶		this.returnType = signature[1];¶		¶		if(name.length == 1) {¶			this.soName = "NONE";¶			this.fnName = name[0];¶		} else if(name.length == 2) {¶			this.soName = name[0];¶			this.fnName = name[1];¶		} else {¶			throw new InvalidFunctionException("Invalid Name");¶		}¶		¶		soName = soName.trim();¶		fnName = fnName.trim();¶		returnType = returnType.trim();¶		¶		for(int i=0; i<arguments.length; i++) {¶			arguments[i] = arguments[i].trim();¶		}¶	}¶	¶	public String toCString() throws InvalidFunctionException {¶		StringBuilder sb = new StringBuilder();¶		¶		sb.append(returnType);¶		sb.append(" ");¶		sb.append("I_WRAP_SONAME_FNNAME_ZZ(");¶		sb.append(zEncodeName(soName));¶		sb.append(", ");¶		sb.append(zEncodeName(fnName));¶		sb.append(")\n");¶		¶		sb.append("(");¶		for(int i=0; i<arguments.length; i++) {¶			sb.append(arguments[i]);¶			if(i<arguments.length-1) {¶				sb.append(", ");¶			}¶		}¶		sb.append(")\n");¶		¶		sb.append("{");¶		¶		sb.append("\n\t");¶		¶		sb.append("OrigFn fn;");¶		sb.append("\n\t");¶¶		sb.append("VALGRIND_GET_ORIG_FN(fn);");¶		sb.append("\n\t");¶¶		¶		if(!isVoid()) {¶			sb.append(returnType);¶			sb.append(" result;");¶			sb.append("\n\t");¶¶		}¶		¶		sb.append("CALL_FN_");¶		¶		if(isVoid()) {¶			sb.append("v_");¶		} else {¶			sb.append("W_");¶		}¶		¶		switch(arguments.length) {¶		case 0: ¶			sb.append("v"); break;¶		case 1: case 2: case 3: case 4: ¶			for(int i=0; i<arguments.length; i++) sb.append("W");¶			break;¶		case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12:¶			sb.append(arguments.length);¶			sb.append("W");¶			break;¶		default: ¶			throw new InvalidFunctionException("Function contains more than 12 arguments");¶		}¶		¶		sb.append("(");¶		¶		if(!isVoid()) {¶			sb.append("result, ");¶		}¶		¶		sb.append("fn, ");¶		¶		for(int i=0; i<arguments.length; i++) {¶			sb.append(parseArgName(arguments[i]));¶			¶			if(i < arguments.length-1) {¶				sb.append(", ");¶			}¶		}¶		¶		sb.append(");");¶		sb.append("\n\t");¶¶		¶		sb.append("trace(\""+fnName+": ");¶		for(int i=0; i<arguments.length; i++) {¶			sb.append("%");¶			sb.append(argStringFormatter(arguments[i]));¶			¶			if(i < arguments.length-1) {¶				sb.append(", ");¶			}¶		}¶		¶		if(!isVoid()) {¶			sb.append(" -> ");¶			sb.append("%");¶			sb.append(argStringFormatter(returnType));¶		}¶		¶		sb.append("\",");¶		for(int i=0; i<arguments.length; i++) {¶			if(argType(arguments[i]) == StringType.OTHER) {¶				sb.append("&");¶			}¶			¶			sb.append(parseArgName(arguments[i]));¶			¶			if(i < arguments.length-1) {¶				sb.append(", ");¶			}¶		}¶		¶		if(!isVoid()) {¶			sb.append(", ");¶			¶			if(argType(returnType) == StringType.OTHER) {¶				sb.append("&");¶			}¶			¶			sb.append("result");¶		}¶		sb.append(");");¶		sb.append("\n");¶¶		¶		if(!isVoid()) {¶			sb.append("\t");¶			sb.append("return result;");¶			sb.append("\n");¶		}¶		¶		sb.append("}");¶		¶		return sb.toString();¶	}¶	¶	private enum StringType {¶		INT, UNSIGNED_INT, SIZE_T,¶		LONG, UNSIGNED_LONG, LONG_LONG, UNSIGNED_LONG_LONG,¶		SHORT,UNSIGNED_SHORT,¶		FLOAT, DOUBLE, LONG_DOUBLE,¶		CHAR, POINTER, ARRAY, OTHER¶	}¶	¶	private StringType argType(String arg) {¶		if(arg.contains("*")) return StringType.POINTER;¶		if(arg.contains("[]")) return StringType.ARRAY;¶		¶		if(arg.contains("long double")) return StringType.LONG_DOUBLE;¶		if(arg.contains("double")) return StringType.DOUBLE;¶		if(arg.contains("float")) return StringType.FLOAT;¶		¶		if(arg.contains("unsigned long long")) return StringType.UNSIGNED_LONG_LONG;¶		if(arg.contains("unsigned long")) return StringType.UNSIGNED_LONG;¶		if(arg.contains("long long")) return StringType.LONG_LONG;¶		if(arg.contains("long")) return StringType.LONG;¶		¶		if(arg.contains("unsigned short")) return StringType.UNSIGNED_SHORT;¶		if(arg.contains("short")) return StringType.SHORT;¶		¶		if(arg.contains("unsigned int")) return StringType.UNSIGNED_INT;¶		if(arg.contains("int")) return StringType.INT;¶		¶		if(arg.contains("char")) return StringType.CHAR;¶		¶		if(arg.contains("size_t")) return StringType.SIZE_T;¶			¶		return StringType.OTHER;¶	}¶	¶	private String argStringFormatter(String arg) {¶		switch(argType(arg)) {¶		case POINTER: return "p";¶		case ARRAY: return "p";¶		¶		case LONG_DOUBLE: return "Lg";¶		case DOUBLE: case FLOAT: return "g";¶		¶		case UNSIGNED_LONG_LONG: return "llu";¶		case UNSIGNED_LONG: return "lu";¶		case LONG_LONG: return "lli";¶		case LONG: return "li";¶		¶		case UNSIGNED_SHORT: return "hu";¶		case SHORT: return "hi";¶		¶		case UNSIGNED_INT: return "u";¶		case INT: return "i";¶		¶		case CHAR: return "c";¶		¶		case SIZE_T: return "zu";	¶		¶		case OTHER: default: return "p";¶		}¶	}¶	¶	private String parseArgName(String arg) throws InvalidFunctionException {¶		// funarg¶		if(arg.charAt(arg.length()-1) == ')') {¶			Pattern pattern = Pattern.compile(".+\\(\\*(.+)\\)\\(.+\\)");¶			Matcher m = pattern.matcher(arg);¶			if(m.matches()) {¶				return m.group(1);¶			} else {¶				throw new InvalidFunctionException("Invalid argument syntax: "+arg);¶			}¶		} else {¶			String[] comps = arg.split(" |\\*");¶			return comps[comps.length-1];¶		}¶	}¶	¶	private String zEncodeName(String name) throws InvalidFunctionException {¶		/*¶			 Za   encodes    *¶			 Zp              +¶			 Zc              :¶			 Zd              .¶			 Zu              _¶			 Zh              -¶			 Zs              (space)¶			 ZA              @¶			 ZZ              Z¶			 ZL              (       # only in valgrind 3.3.0 and later¶			 ZR              )       # only in valgrind 3.3.0 and later¶		 */¶		¶		StringBuilder sb = new StringBuilder();¶		for(char c: name.toCharArray()) {¶			switch(c) {¶			case('*'): sb.append("Za"); break;¶			case('+'): sb.append("Zp"); break;¶			case(':'): sb.append("Zc"); break;¶			case('.'): sb.append("Zd"); break;¶			case('_'): sb.append("Zu"); break;¶			case('-'): sb.append("Zh"); break;¶			case(' '): sb.append("Zs"); break;¶			case('@'): sb.append("ZA"); break;¶			case('Z'): sb.append("ZZ"); break;¶			case('('): sb.append("ZL"); break;¶			case(')'): sb.append("ZR"); break;¶			default: ¶				if(Character.isLetterOrDigit(c)) {¶					sb.append(c);¶				} else {¶					throw new InvalidFunctionException("Invalid character in function name");¶				}¶			}¶		}¶		¶		return sb.toString();¶	}¶	¶	private boolean isVoid() {¶		return returnType.equals("void");¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="79" _type="EclipseCommand" commandID="" date="Mon Mar 28 22:24:18 EDT 2022" starttimestamp="1648506637134" timestamp="14021252" />
  <Command __id="80" _type="EclipseCommand" commandID="" date="Mon Mar 28 22:24:18 EDT 2022" starttimestamp="1648506637134" timestamp="14021276" />
  <Command __id="81" _type="ShellCommand" date="Mon Mar 28 22:24:26 EDT 2022" starttimestamp="1648506637134" timestamp="14029766" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="82" _type="ShellCommand" date="Mon Mar 28 22:24:34 EDT 2022" starttimestamp="1648506637134" timestamp="14036957" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="83" _type="ShellCommand" date="Mon Mar 28 22:24:35 EDT 2022" starttimestamp="1648506637134" timestamp="14038489" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="78" _type="DiffBasedFileOpenCommand" date="Mon Mar 28 22:23:59 EDT 2022" docASTNodeCount="1" docActiveCodeLength="469" docExpressionCount="0" docLength="469" projectName="ValgrindWrappingTool" starttimestamp="1648506637134" timestamp="14002120">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/TraceConfig]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"#include <stdio.h>¶#include <pthread.h>¶#include <unistd.h>¶¶"), Diff(DELETE,"¶"), Diff(EQUAL,"libpthread.so.0,"), Diff(INSERT," "), Diff(EQUAL,"pthread_create:pthread_t *restrict thread, const pthread_attr_t *restrict attr,void *(*start_routine)(void *),void *restrict arg->int¶libpthread*,"), Diff(INSERT," "), Diff(EQUAL,"pthread_join:pthread_t thread, void **retval->int¶¶*, pthread_mutex_init: pthread_mutex_t *mutex, const pthread_mutexattr_t *attr -> int¶*, pthread_mutex_lock: pthread_mutex_t *mutex -> int¶*, pthread_mutex_unlock: pthread_mutex_t *mutex -> int")]]]></diff>
    <snapshot><![CDATA[#include <stdio.h>
#include <pthread.h>
#include <unistd.h>

libpthread.so.0, pthread_create:pthread_t *restrict thread, const pthread_attr_t *restrict attr,void *(*start_routine)(void *),void *restrict arg->int
libpthread*, pthread_join:pthread_t thread, void **retval->int

*, pthread_mutex_init: pthread_mutex_t *mutex, const pthread_mutexattr_t *attr -> int
*, pthread_mutex_lock: pthread_mutex_t *mutex -> int
*, pthread_mutex_unlock: pthread_mutex_t *mutex -> int]]></snapshot>
  </Command>
  <Command __id="84" _type="ShellCommand" date="Mon Mar 28 22:25:18 EDT 2022" starttimestamp="1648506637134" timestamp="14081689" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="85" _type="DiffBasedFileOpenCommand" date="Mon Mar 28 22:25:21 EDT 2022" docASTNodeCount="170" docActiveCodeLength="873" docExpressionCount="111" docLength="873" projectName="ValgrindWrappingTool" starttimestamp="1648506637134" timestamp="14084834">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/grader/Trace.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package grader;¶¶import java.util.regex.Matcher;¶import java.util.regex.Pattern;¶¶public class Trace {¶	long timestamp, thread;¶	String fnname, result;¶	String[] arguments;¶	¶	public class TraceParsingException extends Exception {¶		public TraceParsingException(String trace) {¶			super(trace);¶		}¶¶		private static final long serialVersionUID = 1;¶	}¶	¶	public Trace(String trace) throws Exception {¶		Pattern pattern = Pattern.compile("([0-9]+) - Thread: ([0-9]+) - (.*): (.*) -> (.*)");¶		Matcher m = pattern.matcher(trace);¶		¶		if(m.matches()) {¶			timestamp = Long.parseLong(m.group(1));¶			thread = Long.parseLong(m.group(2));¶			fnname = m.group(3);¶			arguments = m.group(4).split(",");¶			result = m.group(5);¶¶			for(int i=0; i<arguments.length; i++) {¶				arguments[i] = arguments[i].trim();¶			}¶		} else {¶			throw new TraceParsingException(trace);¶		}¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="86" _type="MoveCaretCommand" caretOffset="0" date="Mon Mar 28 22:25:22 EDT 2022" docOffset="0" starttimestamp="1648506637134" timestamp="14085109" />
  <Command __id="87" _type="DiffBasedFileOpenCommand" date="Mon Mar 28 22:25:22 EDT 2022" docASTNodeCount="93" docActiveCodeLength="432" docExpressionCount="59" docLength="432" projectName="ValgrindWrappingTool" starttimestamp="1648506637134" timestamp="14085301">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/grader/Test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package grader;¶¶import java.awt.Color;¶import java.awt.Component;¶¶import javax.swing.JLabel;¶¶public class Test {¶	public String name;¶	public boolean passed;¶	¶	public Test(String name, boolean passed) {¶		this.name = name;¶		this.passed = passed;¶	}¶	¶	public Component view() {¶		JLabel view = new JLabel((passed ? "PASSED - " : "FAILED - ") + name);¶		view.setForeground(passed ? Color.GREEN : Color.RED);¶		return view;¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="88" _type="MoveCaretCommand" caretOffset="0" date="Mon Mar 28 22:25:22 EDT 2022" docOffset="0" starttimestamp="1648506637134" timestamp="14085561" />
  <Command __id="89" _type="DiffBasedFileOpenCommand" date="Mon Mar 28 22:25:25 EDT 2022" docASTNodeCount="154" docActiveCodeLength="757" docExpressionCount="89" docLength="757" projectName="ValgrindWrappingTool" starttimestamp="1648506637134" timestamp="14087916">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/grader/AbstractGrader.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package grader;¶¶import java.io.File;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.Scanner;¶¶import grader.Trace.TraceParsingException;¶¶public abstract class AbstractGrader implements Grader {¶	List<Trace> traces;¶	List<String> stdout;¶	¶	public AbstractGrader(String studentDir, String filename) throws Exception {¶		traces = new ArrayList<Trace>();¶		stdout = new ArrayList<String>();¶		¶		File file = new File(studentDir + "/" + filename);¶		Scanner scanner = new Scanner(file);¶		¶		while(scanner.hasNextLine()) {¶			String line = scanner.nextLine();¶			try {¶				traces.add(new Trace(line));¶			} catch (TraceParsingException e) {¶				stdout.add(line);¶			}¶		}¶		¶		scanner.close();¶	}¶	¶	public abstract List<Test> grade();¶}¶")]]]></diff>
  </Command>
  <Command __id="90" _type="MoveCaretCommand" caretOffset="591" date="Mon Mar 28 22:25:25 EDT 2022" docOffset="712" starttimestamp="1648506637134" timestamp="14088065" />
  <Command __id="91" _type="DiffBasedFileOpenCommand" date="Mon Mar 28 22:25:28 EDT 2022" docASTNodeCount="93" docActiveCodeLength="432" docExpressionCount="59" docLength="432" projectName="ValgrindWrappingTool" starttimestamp="1648506637134" timestamp="14091452">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/grader/Test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package grader;¶¶import java.awt.Color;¶import java.awt.Component;¶¶import javax.swing.JLabel;¶¶public class Test {¶	public String name;¶	public boolean passed;¶	¶	public Test(String name, boolean passed) {¶		this.name = name;¶		this.passed = passed;¶	}¶	¶	public Component view() {¶		JLabel view = new JLabel((passed ? "PASSED - " : "FAILED - ") + name);¶		view.setForeground(passed ? Color.GREEN : Color.RED);¶		return view;¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="93" _type="DiffBasedFileOpenCommand" date="Mon Mar 28 22:25:31 EDT 2022" docASTNodeCount="1" docActiveCodeLength="460" docExpressionCount="0" docLength="460" projectName="ValgrindWrappingTool" starttimestamp="1648506637134" timestamp="14093901">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/TraceConfig]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"#include <stdio.h>¶#include <pthread.h>¶#include <unistd.h>¶¶libpthread.so.0, pthread_create:pthread_t *restrict thread, const pthread_attr_t *restrict attr,void *(*start_routine)(void *),void *restrict arg->int¶libpthread*, pthread_join:pthread_t thread, void **retval->int¶¶*, pthread_mutex_init: pthread_mutex_t *mutex, const pthread_mutexattr_t *attr -> int¶"), Diff(DELETE,"*, "), Diff(EQUAL,"pthread_mutex_lock: pthread_mutex_t *mutex -> int¶"), Diff(DELETE,"*, "), Diff(EQUAL,"pthread_mutex_un"), Diff(DELETE,"lock"), Diff(INSERT,"*"), Diff(EQUAL,": pthread_mutex_t *mutex -> int")]]]></diff>
    <snapshot><![CDATA[#include <stdio.h>
#include <pthread.h>
#include <unistd.h>

libpthread.so.0, pthread_create:pthread_t *restrict thread, const pthread_attr_t *restrict attr,void *(*start_routine)(void *),void *restrict arg->int
libpthread*, pthread_join:pthread_t thread, void **retval->int

*, pthread_mutex_init: pthread_mutex_t *mutex, const pthread_mutexattr_t *attr -> int
pthread_mutex_lock: pthread_mutex_t *mutex -> int
pthread_mutex_un*: pthread_mutex_t *mutex -> int]]></snapshot>
  </Command>
  <Command __id="92" _type="MoveCaretCommand" caretOffset="0" date="Mon Mar 28 22:25:28 EDT 2022" docOffset="0" starttimestamp="1648506637134" timestamp="14091657" />
  <Command __id="95" _type="MoveCaretCommand" caretOffset="1059" date="Mon Mar 28 22:25:43 EDT 2022" docOffset="1289" starttimestamp="1648506637134" timestamp="14106539" />
  <Command __id="96" _type="MoveCaretCommand" caretOffset="889" date="Mon Mar 28 22:25:51 EDT 2022" docOffset="1119" starttimestamp="1648506637134" timestamp="14114564" />
  <Command __id="97" _type="MoveCaretCommand" caretOffset="949" date="Mon Mar 28 22:25:52 EDT 2022" docOffset="1179" starttimestamp="1648506637134" timestamp="14115768" />
  <Command __id="99" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Mar 28 22:25:53 EDT 2022" starttimestamp="1648506637134" timestamp="14116489" />
  <Command __id="100" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Mar 28 22:25:54 EDT 2022" starttimestamp="1648506637134" timestamp="14117071" />
  <Command __id="101" _type="EclipseCommand" commandID="" date="Mon Mar 28 22:25:54 EDT 2022" starttimestamp="1648506637134" timestamp="14117560" />
  <Command __id="102" _type="EclipseCommand" commandID="" date="Mon Mar 28 22:25:54 EDT 2022" starttimestamp="1648506637134" timestamp="14117580" />
  <Command __id="103" _type="ShellCommand" date="Mon Mar 28 22:26:01 EDT 2022" starttimestamp="1648506637134" timestamp="14124318" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="104" _type="ShellCommand" date="Mon Mar 28 22:26:04 EDT 2022" starttimestamp="1648506637134" timestamp="14127816" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="105" _type="EclipseCommand" commandID="org.eclipse.ui.file.export" date="Mon Mar 28 22:26:04 EDT 2022" starttimestamp="1648506637134" timestamp="14127823" />
  <Command __id="106" _type="EclipseCommand" commandID="org.eclipse.ui.file.export" date="Mon Mar 28 22:26:04 EDT 2022" starttimestamp="1648506637134" timestamp="14127823" />
  <Command __id="107" _type="ShellCommand" date="Mon Mar 28 22:26:05 EDT 2022" starttimestamp="1648506637134" timestamp="14128574" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="108" _type="ShellCommand" date="Mon Mar 28 22:26:17 EDT 2022" starttimestamp="1648506637134" timestamp="14140620" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="109" _type="ShellCommand" date="Mon Mar 28 22:26:19 EDT 2022" starttimestamp="1648506637134" timestamp="14142135" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="110" _type="ShellCommand" date="Mon Mar 28 22:26:58 EDT 2022" starttimestamp="1648506637134" timestamp="14181290" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="111" _type="ShellCommand" date="Mon Mar 28 22:26:59 EDT 2022" starttimestamp="1648506637134" timestamp="14182665" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="94" _type="DiffBasedFileOpenCommand" date="Mon Mar 28 22:25:43 EDT 2022" docASTNodeCount="212" docActiveCodeLength="1292" docExpressionCount="126" docLength="1292" projectName="ValgrindWrappingTool" starttimestamp="1648506637134" timestamp="14106158">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/main/Main.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package main;

import java.util.List;

import javax.swing.SwingUtilities;

import compiler.CompilerHelper;
import compiler.DockerHelper;
import grader.Grader;
import grader.SimpleGrader;
import grader.Test;
import gui.App;
import parser.Parser;
import parser.Wrapper;

public class Main {
	public static final String WRAPPER_FILE_SUFFIX = "-wrapper";
	public static final String CONFIG_FILE = "TraceConfig";
	public static final String TRACE_FILE = "Traces";
	
	public static void main(String[] args) {
		SwingUtilities.invokeLater(new App());
	}
	
	public static List<Test> testDirectory(String directory) {
		try {
			DockerHelper.deleteContainer();
			DockerHelper.createContainer(directory);
			
			Parser parser = new Parser(CONFIG_FILE);
			
			Wrapper wrapper = parser.parse();
			wrapper.toFile(CONFIG_FILE, directory);
			
			CompilerHelper ch = new CompilerHelper(CONFIG_FILE, directory, TRACE_FILE);
			
			ch.compileWrapper();
			ch.deleteWrapperCFile();
			ch.compileStudentCode();
			ch.deleteWrapperObjFile();
			ch.trace();
			ch.deleteBinary();
			
			DockerHelper.stopContainer();
			
			Grader grader = new SimpleGrader(directory, TRACE_FILE);
			ch.deleteTraces();
			return grader.grade();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return null;
	}
}
]]></snapshot>
  </Command>
  <DocumentChange __id="98" _type="Insert" date="Mon Mar 28 22:25:53 EDT 2022" docASTNodeCount="208" docActiveCodeLength="1271" docExpressionCount="123" docLength="1294" length="2" offset="1163" starttimestamp="1648506637134" timestamp="14116458">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="114" _type="EclipseCommand" commandID="" date="Mon Mar 28 22:27:16 EDT 2022" starttimestamp="1648506637134" timestamp="14199426" />
  <Command __id="115" _type="EclipseCommand" commandID="" date="Mon Mar 28 22:27:16 EDT 2022" starttimestamp="1648506637134" timestamp="14199442" />
  <Command __id="116" _type="ShellCommand" date="Mon Mar 28 22:27:19 EDT 2022" starttimestamp="1648506637134" timestamp="14202525" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="118" _type="RunCommand" date="Mon Mar 28 22:27:26 EDT 2022" kind="HitBreakPoint" projectName="ValgrindWrappingTool" starttimestamp="1648506637134" timestamp="14209001" type="Run" />
  <Command __id="119" _type="RunCommand" date="Mon Mar 28 22:27:26 EDT 2022" kind="HitBreakPoint" projectName="ValgrindWrappingTool" starttimestamp="1648506637134" timestamp="14209002" type="Run" />
  <Command __id="120" _type="ShellCommand" date="Mon Mar 28 22:27:27 EDT 2022" starttimestamp="1648506637134" timestamp="14209866" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="121" _type="ConsoleOutput" date="Mon Mar 28 22:27:35 EDT 2022" overflow="false" starttimestamp="1648506637134" timestamp="14218141" type="ConsoleOutput">
    <outputString><![CDATA[Executing: /usr/local/bin/docker rm -f grader-container
]]></outputString>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="122" _type="ConsoleOutput" date="Mon Mar 28 22:27:35 EDT 2022" overflow="false" starttimestamp="1648506637134" timestamp="14218336" type="ConsoleOutput">
    <outputString><![CDATA[grader-container
Executing: /usr/local/bin/docker run -it -d --mount type=bind,src=/Users/nalingaddis/Desktop/ExampleAssignments/mutex,target=/home --name grader-container nalingaddis/valgrind
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"grader-container¶"), Diff(EQUAL,"Executing: /usr/local/bin/docker r"), Diff(DELETE,"m -f grader-container"), Diff(INSERT,"un -it -d --mount type=bind,src=/Users/nalingaddis/Desktop/ExampleAssignments/mutex,target=/home --name grader-container nalingaddis/valgrind"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="123" _type="ConsoleOutput" date="Mon Mar 28 22:27:35 EDT 2022" overflow="false" starttimestamp="1648506637134" timestamp="14218660" type="ConsoleOutput">
    <outputString><![CDATA[e0ee4d1fda6c77dd37872532006504d220a9dbfed2fef11dc82fb638f5a49c57
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"grader-container¶Executing: /usr/local/bin/docker run -it -d --mount type=bind,src=/Users/nalingaddis/Desktop/ExampleAssignments/mutex,target=/home --name grader-container nalingaddis/valgrind"), Diff(INSERT,"e0ee4d1fda6c77dd37872532006504d220a9dbfed2fef11dc82fb638f5a49c57"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="124" _type="ConsoleOutput" date="Mon Mar 28 22:27:36 EDT 2022" overflow="false" starttimestamp="1648506637134" timestamp="14218990" type="ConsoleOutput">
    <outputString><![CDATA[Executing: /usr/local/bin/docker exec grader-container sh -c gcc -c -pthread TraceConfig-wrapper.c -o TraceConfig-wrapper.o
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"e0ee4d1fda6c77dd37872532006504d220a9dbfed2fef11dc82fb638f5a49c57"), Diff(INSERT,"Executing: /usr/local/bin/docker exec grader-container sh -c gcc -c -pthread TraceConfig-wrapper.c -o TraceConfig-wrapper.o"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="125" _type="ConsoleOutput" date="Mon Mar 28 22:27:36 EDT 2022" overflow="false" starttimestamp="1648506637134" timestamp="14219398" type="ConsoleOutput">
    <outputString><![CDATA[Executing: rm -f /Users/nalingaddis/Desktop/ExampleAssignments/mutex/TraceConfig-wrapper.c
Executing: /usr/local/bin/docker exec grader-container sh -c gcc -pthread TraceConfig-wrapper.o -o WrappedStudentCode mutex.c
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Executing: rm -f /Users/nalingaddis/Desktop/ExampleAssignments/mutex/TraceConfig-wrapper.c¶"), Diff(EQUAL,"Executing: /usr/local/bin/docker exec grader-container sh -c gcc "), Diff(DELETE,"-c "), Diff(EQUAL,"-pthread TraceConfig-wrapper."), Diff(DELETE,"c"), Diff(INSERT,"o"), Diff(EQUAL," -o "), Diff(DELETE,"T"), Diff(INSERT,"W"), Diff(EQUAL,"ra"), Diff(DELETE,"ceConfig-wrapper.o"), Diff(INSERT,"ppedStudentCode mutex.c"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="126" _type="ConsoleOutput" date="Mon Mar 28 22:27:37 EDT 2022" overflow="false" starttimestamp="1648506637134" timestamp="14219966" type="ConsoleOutput">
    <outputString><![CDATA[Executing: rm -f /Users/nalingaddis/Desktop/ExampleAssignments/mutex/TraceConfig-wrapper.o
Executing: /usr/local/bin/docker exec grader-container sh -c valgrind --trace-children=yes ./WrappedStudentCode > Traces
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Executing: rm -f /Users/nalingaddis/Desktop/ExampleAssignments/mutex/TraceConfig-wrapper."), Diff(DELETE,"c"), Diff(INSERT,"o"), Diff(EQUAL,"¶Executing: /usr/local/bin/docker exec grader-container sh -c "), Diff(DELETE,"gcc -pthread TraceConfig-wrapper.o -o "), Diff(INSERT,"valgrind --trace-children=yes ./"), Diff(EQUAL,"WrappedStudentCode "), Diff(DELETE,"mutex.c"), Diff(INSERT,"> Traces"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="127" _type="ConsoleOutput" date="Mon Mar 28 22:27:37 EDT 2022" overflow="false" starttimestamp="1648506637134" timestamp="14220271" type="ConsoleOutput">
    <outputString><![CDATA[==41== Memcheck, a memory error detector
==41== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==41== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==41== Command: ./WrappedStudentCode
==41== 
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Executing: rm -f /Users/nalingaddis/Desktop/ExampleAssignments/mutex/TraceConfig-wrapper.o¶Executing: /usr/local/bin/docker exec grader-container sh -c valgrind --trace-children=yes"), Diff(INSERT,"==41== Memcheck, a memory error detector¶==41== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.¶==41== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info¶==41== Command:"), Diff(EQUAL," ./WrappedStudentCode"), Diff(DELETE," > Traces"), Diff(INSERT,"¶==41== "), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="128" _type="ConsoleOutput" date="Mon Mar 28 22:27:38 EDT 2022" overflow="false" starttimestamp="1648506637134" timestamp="14221033" type="ConsoleOutput">
    <outputString><![CDATA[==41== 
==41== HEAP SUMMARY:
==41==     in use at exit: 0 bytes in 0 blocks
==41==   total heap usage: 3 allocs, 3 frees, 4,640 bytes allocated
==41== 
==41== All heap blocks were freed -- no leaks are possible
==41== 
==41== For lists of detected and suppressed errors, rerun with: -s
==41== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Executing: rm -f /Users/nalingaddis/Desktop/ExampleAssignments/mutex/WrappedStudentCode
Executing: /usr/local/bin/docker stop grader-container
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"==41== "), Diff(DELETE,"Memcheck, a memory error detector¶==41== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.¶==41== Using Valgrind-3.15.0 and LibVEX;"), Diff(INSERT,"¶==41== HEAP SUMMARY:¶==41==     in use at exit: 0 bytes in 0 blocks¶==41==   total heap usage: 3 allocs, 3 frees, 4,640 bytes allocated¶==41== ¶==41== All heap blocks were freed -- no leaks are possible¶==41== ¶==41== For lists of detected and suppressed errors,"), Diff(EQUAL," rerun with"), Diff(INSERT,":"), Diff(EQUAL," -"), Diff(DELETE,"h for copyright info¶==41== Command: ./WrappedStudentCode¶==41== "), Diff(INSERT,"s¶==41== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)¶Executing: rm -f /Users/nalingaddis/Desktop/ExampleAssignments/mutex/WrappedStudentCode¶Executing: /usr/local/bin/docker stop grader-container"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="129" _type="ConsoleOutput" date="Mon Mar 28 22:27:38 EDT 2022" overflow="false" starttimestamp="1648506637134" timestamp="14221438" type="ConsoleOutput">
    <outputString><![CDATA[grader-container
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"==41== ¶==41== HEAP SUMMARY:¶==41==     in use at exit: 0 bytes in 0 blocks¶==41==   total heap usage: 3 allocs, 3 frees, 4,640 bytes allocated¶==41== ¶==41== All heap blocks were freed -- no leaks are possible¶==41== ¶==41== For lists of detected and suppressed errors, rerun with: -s¶==41== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)¶Executing: rm -f /Users/nalingaddis/Desktop/ExampleAssignments/mutex/WrappedStudentCode¶Executing: /usr/local/bin/docker stop "), Diff(EQUAL,"grader-container¶")]]]></diff>
  </Command>
  <Command __id="113" _type="DiffBasedFileOpenCommand" date="Mon Mar 28 22:27:09 EDT 2022" docASTNodeCount="1" docActiveCodeLength="460" docExpressionCount="0" docLength="460" projectName="ValgrindWrappingTool" starttimestamp="1648506637134" timestamp="14192732">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/TraceConfig]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"#include <stdio.h>¶#include <pthread.h>¶#include <unistd.h>¶¶libpthread.so.0, pthread_create:pthread_t *restrict thread, const pthread_attr_t *restrict attr,void *(*start_routine)(void *),void *restrict arg->int¶libpthread*, pthread_join:pthread_t thread, void **retval->int¶¶*, pthread_mutex_init: pthread_mutex_t *mutex, const pthread_mutexattr_t *attr -> int¶pthread_mutex_lock: pthread_mutex_t *mutex -> int¶pthread_mutex_un*: pthread_mutex_t *mutex -> int")]]]></diff>
  </Command>
  <Command __id="131" _type="DiffBasedFileOpenCommand" date="Mon Mar 28 22:28:05 EDT 2022" docASTNodeCount="1" docActiveCodeLength="463" docExpressionCount="0" docLength="463" projectName="ValgrindWrappingTool" starttimestamp="1648506637134" timestamp="14248208">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/TraceConfig]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"#include <stdio.h>¶#include <pthread.h>¶#include <unistd.h>¶¶libpthread.so.0, pthread_create:pthread_t *restrict thread, const pthread_attr_t *restrict attr,void *(*start_routine)(void *),void *restrict arg->int¶libpthread*, pthread_join:pthread_t thread, void **retval->int¶¶*, pthread_mutex_init: pthread_mutex_t *mutex, const pthread_mutexattr_t *attr -> int¶pthread_mutex_lock: pthread_mutex_t *mutex -> int¶"), Diff(INSERT,"*, "), Diff(EQUAL,"pthread_mutex_un*: pthread_mutex_t *mutex -> int")]]]></diff>
    <snapshot><![CDATA[#include <stdio.h>
#include <pthread.h>
#include <unistd.h>

libpthread.so.0, pthread_create:pthread_t *restrict thread, const pthread_attr_t *restrict attr,void *(*start_routine)(void *),void *restrict arg->int
libpthread*, pthread_join:pthread_t thread, void **retval->int

*, pthread_mutex_init: pthread_mutex_t *mutex, const pthread_mutexattr_t *attr -> int
pthread_mutex_lock: pthread_mutex_t *mutex -> int
*, pthread_mutex_un*: pthread_mutex_t *mutex -> int]]></snapshot>
  </Command>
  <Command __id="132" _type="EclipseCommand" commandID="" date="Mon Mar 28 22:28:09 EDT 2022" starttimestamp="1648506637134" timestamp="14252353" />
  <Command __id="133" _type="EclipseCommand" commandID="" date="Mon Mar 28 22:28:09 EDT 2022" starttimestamp="1648506637134" timestamp="14252361" />
  <Command __id="134" _type="DiffBasedFileOpenCommand" date="Mon Mar 28 22:28:13 EDT 2022" docASTNodeCount="208" docActiveCodeLength="1271" docExpressionCount="123" docLength="1294" projectName="ValgrindWrappingTool" starttimestamp="1648506637134" timestamp="14256074">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/main/Main.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package main;¶¶import java.util.List;¶¶import javax.swing.SwingUtilities;¶¶import compiler.CompilerHelper;¶import compiler.DockerHelper;¶import grader.Grader;¶import grader.SimpleGrader;¶import grader.Test;¶import gui.App;¶import parser.Parser;¶import parser.Wrapper;¶¶public class Main {¶	public static final String WRAPPER_FILE_SUFFIX = "-wrapper";¶	public static final String CONFIG_FILE = "TraceConfig";¶	public static final String TRACE_FILE = "Traces";¶	¶	public static void main(String[] args) {¶		SwingUtilities.invokeLater(new App());¶	}¶	¶	public static List<Test> testDirectory(String directory) {¶		try {¶			DockerHelper.deleteContainer();¶			DockerHelper.createContainer(directory);¶			¶			Parser parser = new Parser(CONFIG_FILE);¶			¶			Wrapper wrapper = parser.parse();¶			wrapper.toFile(CONFIG_FILE, directory);¶			¶			CompilerHelper ch = new CompilerHelper(CONFIG_FILE, directory, TRACE_FILE);¶			¶			ch.compileWrapper();¶			ch.deleteWrapperCFile();¶			ch.compileStudentCode();¶			ch.deleteWrapperObjFile();¶			ch.trace();¶			ch.deleteBinary();¶			¶			DockerHelper.stopContainer();¶			¶			Grader grader = new SimpleGrader(directory, TRACE_FILE);¶"), Diff(INSERT,"//"), Diff(EQUAL,"			ch.deleteTraces();¶			return grader.grade();¶			¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶		¶		return null;¶	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package main;

import java.util.List;

import javax.swing.SwingUtilities;

import compiler.CompilerHelper;
import compiler.DockerHelper;
import grader.Grader;
import grader.SimpleGrader;
import grader.Test;
import gui.App;
import parser.Parser;
import parser.Wrapper;

public class Main {
	public static final String WRAPPER_FILE_SUFFIX = "-wrapper";
	public static final String CONFIG_FILE = "TraceConfig";
	public static final String TRACE_FILE = "Traces";
	
	public static void main(String[] args) {
		SwingUtilities.invokeLater(new App());
	}
	
	public static List<Test> testDirectory(String directory) {
		try {
			DockerHelper.deleteContainer();
			DockerHelper.createContainer(directory);
			
			Parser parser = new Parser(CONFIG_FILE);
			
			Wrapper wrapper = parser.parse();
			wrapper.toFile(CONFIG_FILE, directory);
			
			CompilerHelper ch = new CompilerHelper(CONFIG_FILE, directory, TRACE_FILE);
			
			ch.compileWrapper();
			ch.deleteWrapperCFile();
			ch.compileStudentCode();
			ch.deleteWrapperObjFile();
			ch.trace();
			ch.deleteBinary();
			
			DockerHelper.stopContainer();
			
			Grader grader = new SimpleGrader(directory, TRACE_FILE);
//			ch.deleteTraces();
			return grader.grade();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return null;
	}
}
]]></snapshot>
  </Command>
  <Command __id="135" _type="MoveCaretCommand" caretOffset="951" date="Mon Mar 28 22:28:13 EDT 2022" docOffset="1181" starttimestamp="1648506637134" timestamp="14256250" />
  <Command __id="136" _type="MoveCaretCommand" caretOffset="842" date="Mon Mar 28 22:28:13 EDT 2022" docOffset="1072" starttimestamp="1648506637134" timestamp="14256522" />
  <Command __id="138" _type="UndoCommand" date="Mon Mar 28 22:28:14 EDT 2022" starttimestamp="1648506637134" timestamp="14256886" />
  <Command __id="139" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Mar 28 22:28:14 EDT 2022" starttimestamp="1648506637134" timestamp="14257548" />
  <Command __id="140" _type="EclipseCommand" commandID="" date="Mon Mar 28 22:28:14 EDT 2022" starttimestamp="1648506637134" timestamp="14257645" />
  <Command __id="141" _type="EclipseCommand" commandID="" date="Mon Mar 28 22:28:14 EDT 2022" starttimestamp="1648506637134" timestamp="14257663" />
  <Command __id="142" _type="ShellCommand" date="Mon Mar 28 22:28:18 EDT 2022" starttimestamp="1648506637134" timestamp="14261533" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="143" _type="ShellCommand" date="Mon Mar 28 22:28:21 EDT 2022" starttimestamp="1648506637134" timestamp="14264682" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="144" _type="EclipseCommand" commandID="org.eclipse.ui.file.export" date="Mon Mar 28 22:28:21 EDT 2022" starttimestamp="1648506637134" timestamp="14264689" />
  <Command __id="145" _type="EclipseCommand" commandID="org.eclipse.ui.file.export" date="Mon Mar 28 22:28:21 EDT 2022" starttimestamp="1648506637134" timestamp="14264689" />
