<Events startTimestamp="1649193295591" logVersion="1.0.0.202101171653">
  <Command __id="1" _type="MoveCaretCommand" caretOffset="1251" date="Tue Apr 05 17:14:55 EDT 2022" docOffset="1370" starttimestamp="1649193295591" timestamp="303" />
  <Command __id="0" _type="DiffBasedFileOpenCommand" date="Tue Apr 05 17:14:55 EDT 2022" docASTNodeCount="431" docActiveCodeLength="2580" docExpressionCount="283" docLength="3143" projectName="ValgrindWrappingTool" starttimestamp="1649193295591" timestamp="125">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/grader/MutexLruGrader.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package grader;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class MutexLruGrader extends AbstractGrader {

	public MutexLruGrader(String studentDir, String filename) throws Exception {
		super(studentDir, filename);
	}

	@Override
	public List<Test> grade() {
		List<Test> tests = new ArrayList<Test>();
		
		String[] testnames = {
				"Blocks on valid condition variables",
				"Conditional variable waiters awoken",
				"Broadcast (not signal) condition variables",
				"Lock acquired after shutdown"
		};
		
		boolean usingCondVars = blockOnConditionVariables();
		boolean unblockingConds = releaseConditionedWaiters();
		tests.add(new Test(testnames[0], usingCondVars));
		tests.add(new Test(testnames[1], usingCondVars && unblockingConds));
		tests.add(new Test(testnames[2], usingCondVars && unblockingConds && broadcastVsSignal()));
		
//		tests.add(new Test(testnames[3], lockAfterShutdown()));
		
		return tests;
	}
	
	private boolean blockOnConditionVariables() {
				
		Set<String> seen = new HashSet<String>(), inits = new HashSet<String>();
		boolean called = false;
		
		for(Trace trace: traces) {
			if(trace.fnname.equals("pthread_cond_init")) {
				seen.add(trace.arguments[0]);
				inits.add(trace.arguments[0]);
				called = true;
			}
			
			if(trace.fnname.equals("pthread_cond_wait")) {
				if(!inits.contains(trace.arguments[0])) return false;
				return true;
			}
		}
		
		return seen.size() == 0 && called;
	}
	
	private boolean releaseConditionedWaiters() {
		
		Set<String> waiters = new HashSet<String>(), seen = new HashSet<String>();
		for(Trace trace: traces) {
			if(trace.fnname.equals("pthread_cond_wait")) {				
				if(!seen.contains(trace.arguments[0])) 
						waiters.add(trace.arguments[0]);
				seen.add(trace.arguments[0]);
			} 
			
			if(trace.fnname.equals("pthread_cond_broadcast") 
				|| trace.fnname.equals("pthread_cond_signal")){
				waiters.remove(trace.arguments[0]);
			}
		}
		
		return waiters.size() == 0;
	}
	
	private boolean broadcastVsSignal() {
		
		Map<Long, Boolean> threadState = new HashMap<Long, Boolean>();
		
		for(Trace trace: traces) {
			switch(trace.fnname) {
			case "clean": 
				Boolean calledSignal = threadState.get(trace.thread);
				if(calledSignal != null && calledSignal) {
					return false;
				}
				break;
			case "reference": case "shutdown_threads":
				threadState.put(trace.thread, false);
				break;
			case "pthread_cond_signal":
				threadState.put(trace.thread, true);
				break;
			}
		}
		
		return true;
	}
	
//	private boolean lockAfterShutdown() {		
//		Long shutdownThread = (long) -1;
//		String lock = "";
//		
//		for(Trace trace: traces) {
//			if(trace.fnname.equals("pthread_mutex_init")) {
//				lock = trace.arguments[0];
//			}
//			if(trace.fnname.equals("shutdown_threads")) {
//				shutdownThread = trace.thread;
//			}
//			if(trace.fnname.equals("pthread_mutex_lock") 
//					&& shutdownThread == trace.thread 
//					&& lock.equals(trace.arguments[0])) {
//				return true;
//			}
//		}
//		
//		return false;
//	}
}
]]></snapshot>
  </Command>
  <Command __id="3" _type="ShellCommand" date="Tue Apr 05 17:15:03 EDT 2022" starttimestamp="1649193295591" timestamp="7536" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4" _type="DiffBasedFileOpenCommand" date="Tue Apr 05 17:15:04 EDT 2022" docASTNodeCount="165" docActiveCodeLength="808" docExpressionCount="99" docLength="952" projectName="ValgrindWrappingTool" starttimestamp="1649193295591" timestamp="8816">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/grader/AbstractGrader.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package grader;

import java.io.File;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import grader.Trace.TraceParsingException;

public abstract class AbstractGrader implements Grader {
	List<Trace> traces;
	List<String> stdout;
	
	public AbstractGrader(String studentDir, String filename) throws Exception {
		traces = new ArrayList<Trace>();
		stdout = new ArrayList<String>();
		
		File file = new File(Paths.get(studentDir, filename).toString());
		Scanner scanner = new Scanner(file);
		
		while(scanner.hasNextLine()) {
			String line = scanner.nextLine();
			try {
				traces.add(new Trace(line));
			} catch (TraceParsingException e) {
				stdout.add(line);
			}
		}
		
//		traces.sort(new Comparator<Trace>() {
//			public int compare(Trace a, Trace b) {
//				return (int) (a.timestamp - b.timestamp);
//			}
//		});
		
		scanner.close();
	}
	
	public abstract List<Test> grade();
}
]]></snapshot>
  </Command>
  <Command __id="5" _type="MoveCaretCommand" caretOffset="587" date="Tue Apr 05 17:15:05 EDT 2022" docOffset="736" starttimestamp="1649193295591" timestamp="9673" />
  <Command __id="7" _type="MoveCaretCommand" caretOffset="0" date="Tue Apr 05 17:15:18 EDT 2022" docOffset="0" starttimestamp="1649193295591" timestamp="22720" />
  <Command __id="8" _type="MoveCaretCommand" caretOffset="1826" date="Tue Apr 05 17:15:32 EDT 2022" docOffset="1858" starttimestamp="1649193295591" timestamp="37069" />
  <Command __id="9" _type="MoveCaretCommand" caretOffset="1826" date="Tue Apr 05 17:15:33 EDT 2022" docOffset="1858" starttimestamp="1649193295591" timestamp="37564" />
  <Command __id="10" _type="MoveCaretCommand" caretOffset="1830" date="Tue Apr 05 17:15:33 EDT 2022" docOffset="1862" starttimestamp="1649193295591" timestamp="38059" />
  <Command __id="11" _type="ShellCommand" date="Tue Apr 05 17:15:35 EDT 2022" starttimestamp="1649193295591" timestamp="39769" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="12" _type="ShellCommand" date="Tue Apr 05 17:15:37 EDT 2022" starttimestamp="1649193295591" timestamp="41825" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="13" _type="ShellCommand" date="Tue Apr 05 17:15:37 EDT 2022" starttimestamp="1649193295591" timestamp="41993" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14" _type="ShellCommand" date="Tue Apr 05 17:15:37 EDT 2022" starttimestamp="1649193295591" timestamp="42089" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="15" _type="SelectTextCommand" caretOffset="2669" date="Tue Apr 05 17:16:10 EDT 2022" end="2669" start="1844" starttimestamp="1649193295591" timestamp="74986" />
  <Command __id="6" _type="DiffBasedFileOpenCommand" date="Tue Apr 05 17:15:17 EDT 2022" docASTNodeCount="1279" docActiveCodeLength="6829" docExpressionCount="887" docLength="7176" projectName="ValgrindWrappingTool" starttimestamp="1649193295591" timestamp="22229">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/parser/Function.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package parser;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Function {
	String soName, fnName, returnType;
	String[] arguments;
	
	public class InvalidFunctionException extends Exception {
		private static final long serialVersionUID = 1L;

		public InvalidFunctionException(String message) {
			super(message);
		}
	}
	
	public Function(String encoded) throws InvalidFunctionException {
		String[] data = encoded.split(":");
		String[] name = data[0].split(",");
		String[] signature = data[1].split("->");
		
		if(signature[0].trim().equals("void")) {
			this.arguments = new String[0];
		} else {
			this.arguments = signature[0].split(",");
			for(int i=0; i<arguments.length; i++) {
				arguments[i] = arguments[i].trim();
			}
		}
		
		this.returnType = signature[1];
		returnType = returnType.trim();

		if(name.length == 1) {
			this.soName = "NONE";
			this.fnName = name[0];
		} else if(name.length == 2) {
			this.soName = name[0];
			this.fnName = name[1];
		} else {
			throw new InvalidFunctionException("Invalid Name");
		}
		
		soName = soName.trim();
		fnName = fnName.trim();
	}
	
	public String toCString() throws InvalidFunctionException {
		StringBuilder sb = new StringBuilder();
		
		sb.append(returnType);
		sb.append(" ");
		sb.append("I_WRAP_SONAME_FNNAME_ZZ(");
		sb.append(zEncodeName(soName));
		sb.append(", ");
		sb.append(zEncodeName(fnName));
		sb.append(")\n");
		
		sb.append("(");
		for(int i=0; i<arguments.length; i++) {
			sb.append(arguments[i]);
			if(i<arguments.length-1) {
				sb.append(", ");
			}
		}
		sb.append(")\n");
		
		sb.append("{");
		
		sb.append("\n\t");
		
		sb.append("OrigFn fn;");
		sb.append("\n\t");

		sb.append("VALGRIND_GET_ORIG_FN(fn);");
		sb.append("\n\t");

		
		if(!isVoid()) {
			sb.append(returnType);
			sb.append(" result;");
			sb.append("\n\t");

		}
		
		sb.append("CALL_FN_");
		
		if(isVoid()) {
			sb.append("v_");
		} else {
			sb.append("W_");
		}
		
		switch(arguments.length) {
		case 0: 
			sb.append("v"); break;
		case 1: case 2: case 3: case 4: 
			for(int i=0; i<arguments.length; i++) sb.append("W");
			break;
		case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12:
			sb.append(arguments.length);
			sb.append("W");
			break;
		default: 
			throw new InvalidFunctionException("Function contains more than 12 arguments");
		}
		
		sb.append("(");
		
		if(!isVoid()) {
			sb.append("result, ");
		}
		
		sb.append("fn");
		
		for(int i=0; i<arguments.length; i++) {
			if(i == 0) {
				sb.append(", ");
			}
			
			sb.append(parseArgName(arguments[i]));
			
			if(i < arguments.length-1) {
				sb.append(", ");
			}
		}
		
		sb.append(");");
		sb.append("\n\t");

		
		sb.append("trace(\""+fnName+": ");
		
		if(arguments.length == 0) sb.append("void");
		
		for(int i=0; i<arguments.length; i++) {			
			sb.append("%");
			sb.append(argStringFormatter(arguments[i]));
			
			if(i < arguments.length-1) {
				sb.append(", ");
			}
		}
		

		sb.append(" -> ");
		
		if(!isVoid()) {
			sb.append("%");
			sb.append(argStringFormatter(returnType));
		} else {
			sb.append("void");
		}
		
		sb.append("\"");		
		for(int i=0; i<arguments.length; i++) {
			if(i == 0) {
				sb.append(",");
			}
			
			if(argType(arguments[i]) == StringType.OTHER) {
				sb.append("&");
			}
			
			sb.append(parseArgName(arguments[i]));
			
			if(i < arguments.length-1) {
				sb.append(", ");
			}
		}
		
		if(!isVoid()) {
			sb.append(", ");
			
			if(argType(returnType) == StringType.OTHER) {
				sb.append("&");
			}
			
			sb.append("result");
		}
		sb.append(");");
		sb.append("\n");

		
		if(!isVoid()) {
			sb.append("\t");
			sb.append("return result;");
			sb.append("\n");
		}
		
		sb.append("}");
		
		return sb.toString();
	}
	
	private enum StringType {
		INT, UNSIGNED_INT, SIZE_T,
		LONG, UNSIGNED_LONG, LONG_LONG, UNSIGNED_LONG_LONG,
		SHORT,UNSIGNED_SHORT,
		FLOAT, DOUBLE, LONG_DOUBLE,
		CHAR, POINTER, ARRAY, OTHER
	}
	
	private StringType argType(String arg) {
		if(arg.contains("*")) return StringType.POINTER;
		if(arg.contains("[]")) return StringType.ARRAY;
		
		if(arg.contains("long double")) return StringType.LONG_DOUBLE;
		if(arg.contains("double")) return StringType.DOUBLE;
		if(arg.contains("float")) return StringType.FLOAT;
		
		if(arg.contains("unsigned long long")) return StringType.UNSIGNED_LONG_LONG;
		if(arg.contains("unsigned long")) return StringType.UNSIGNED_LONG;
		if(arg.contains("long long")) return StringType.LONG_LONG;
		if(arg.contains("long")) return StringType.LONG;
		
		if(arg.contains("unsigned short")) return StringType.UNSIGNED_SHORT;
		if(arg.contains("short")) return StringType.SHORT;
		
		if(arg.contains("unsigned int")) return StringType.UNSIGNED_INT;
		if(arg.contains("int")) return StringType.INT;
		
		if(arg.contains("char")) return StringType.CHAR;
		
		if(arg.contains("size_t")) return StringType.SIZE_T;
			
		return StringType.OTHER;
	}
	
	private String argStringFormatter(String arg) {
		switch(argType(arg)) {
		case POINTER: return "p";
		case ARRAY: return "p";
		
		case LONG_DOUBLE: return "Lg";
		case DOUBLE: case FLOAT: return "g";
		
		case UNSIGNED_LONG_LONG: return "llu";
		case UNSIGNED_LONG: return "lu";
		case LONG_LONG: return "lli";
		case LONG: return "li";
		
		case UNSIGNED_SHORT: return "hu";
		case SHORT: return "hi";
		
		case UNSIGNED_INT: return "u";
		case INT: return "i";
		
		case CHAR: return "c";
		
		case SIZE_T: return "zu";	
		
		case OTHER: default: return "p";
		}
	}
	
	private String parseArgName(String arg) throws InvalidFunctionException {
		// funarg
		if(arg.charAt(arg.length()-1) == ')') {
			Pattern pattern = Pattern.compile(".+\\(\\*(.+)\\)\\(.+\\)");
			Matcher m = pattern.matcher(arg);
			if(m.matches()) {
				return m.group(1);
			} else {
				throw new InvalidFunctionException("Invalid argument syntax: "+arg);
			}
		} else {
			String[] comps = arg.split(" |\\*");
			return comps[comps.length-1];
		}
	}
	
	private String zEncodeName(String name) throws InvalidFunctionException {
		/*
			 Za   encodes    *
			 Zp              +
			 Zc              :
			 Zd              .
			 Zu              _
			 Zh              -
			 Zs              (space)
			 ZA              @
			 ZZ              Z
			 ZL              (       # only in valgrind 3.3.0 and later
			 ZR              )       # only in valgrind 3.3.0 and later
		 */
		
		StringBuilder sb = new StringBuilder();
		for(char c: name.toCharArray()) {
			switch(c) {
			case('*'): sb.append("Za"); break;
			case('+'): sb.append("Zp"); break;
			case(':'): sb.append("Zc"); break;
			case('.'): sb.append("Zd"); break;
			case('_'): sb.append("Zu"); break;
			case('-'): sb.append("Zh"); break;
			case(' '): sb.append("Zs"); break;
			case('@'): sb.append("ZA"); break;
			case('Z'): sb.append("ZZ"); break;
			case('('): sb.append("ZL"); break;
			case(')'): sb.append("ZR"); break;
			default: 
				if(Character.isLetterOrDigit(c)) {
					sb.append(c);
				} else {
					throw new InvalidFunctionException("Invalid character in function name");
				}
			}
		}
		
		return sb.toString();
	}
	
	private boolean isVoid() {
		return returnType.equals("void");
	}
}
]]></snapshot>
  </Command>
  <Command __id="17" _type="DiffBasedFileOpenCommand" date="Tue Apr 05 17:16:23 EDT 2022" docASTNodeCount="1" docActiveCodeLength="732" docExpressionCount="0" docLength="732" projectName="ValgrindWrappingTool" starttimestamp="1649193295591" timestamp="87465">
    <filePath><![CDATA[/Users/nalingaddis/Documents/COMP691H/ValgrindWrappingTool/src/MutexLruConfig]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[#include <stddef.h>
#include <stdlib.h>
#include <stdio.h>
#include <pthread.h>
#include "lru.h"

init:			  int numthreads -> int
reference:		  int key -> int
clean: 			  int check_water_mark -> void
shutdown_threads: void -> void
print: 			  void -> void

*, pthread_mutex_init: pthread_mutex_t *mutex, const pthread_mutexattr_t *attr -> int
*, pthread_mutex_lock: pthread_mutex_t *mutex -> int
*, pthread_mutex_unlock: pthread_mutex_t *mutex -> int

*, pthread_cond_wait: pthread_cond_t *cond, pthread_mutex_t *mutex -> int
*, pthread_cond_signal: pthread_cond_t *cond -> int
*, pthread_cond_broadcast: pthread_cond_t *cond -> int
*, pthread_cond_init: pthread_cond_t *restrict cond, const pthread_condattr_t *restrict attr -> int]]></snapshot>
  </Command>
  <Command __id="16" _type="MoveCaretCommand" caretOffset="1830" date="Tue Apr 05 17:16:16 EDT 2022" docOffset="1862" starttimestamp="1649193295591" timestamp="81280" />
  <Command __id="19" _type="MoveCaretCommand" caretOffset="1830" date="Tue Apr 05 17:17:10 EDT 2022" docOffset="1862" starttimestamp="1649193295591" timestamp="135336" />
  <Command __id="20" _type="SelectTextCommand" caretOffset="3577" date="Tue Apr 05 17:17:19 EDT 2022" end="3577" start="2676" starttimestamp="1649193295591" timestamp="143814" />
  <Command __id="21" _type="SelectTextCommand" caretOffset="2336" date="Tue Apr 05 17:17:32 EDT 2022" end="2336" start="1833" starttimestamp="1649193295591" timestamp="156437" />
  <Command __id="22" _type="ShellCommand" date="Tue Apr 05 17:17:38 EDT 2022" starttimestamp="1649193295591" timestamp="162416" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="23" _type="ShellCommand" date="Tue Apr 05 17:19:55 EDT 2022" starttimestamp="1649193295591" timestamp="300400" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="24" _type="ShellCommand" date="Tue Apr 05 17:19:56 EDT 2022" starttimestamp="1649193295591" timestamp="301133" type="ECLIPSE_LOST_FOCUS" />
</Events>
